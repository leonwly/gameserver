%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.9-8-gf1d090a on {{2014,4,12},{16,1,8}}
-module(gpb_descriptor).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_FieldDescriptorProto.Type'/1, 'enum_value_by_symbol_FieldDescriptorProto.Type'/1]).
-export(['enum_symbol_by_value_FieldDescriptorProto.Label'/1, 'enum_value_by_symbol_FieldDescriptorProto.Label'/1]).
-export(['enum_symbol_by_value_FileOptions.OptimizeMode'/1, 'enum_value_by_symbol_FileOptions.OptimizeMode'/1]).
-export(['enum_symbol_by_value_FieldOptions.CType'/1, 'enum_value_by_symbol_FieldOptions.CType'/1]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gpb_descriptor.hrl").
-include("gpb.hrl").

encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'UninterpretedOption.NamePart'{} ->
	  'e_msg_UninterpretedOption.NamePart'(Msg);
      #'UninterpretedOption'{} ->
	  e_msg_UninterpretedOption(Msg);
      #'DescriptorProto.ExtensionRange'{} ->
	  'e_msg_DescriptorProto.ExtensionRange'(Msg);
      #'FileOptions'{} -> e_msg_FileOptions(Msg);
      #'MethodOptions'{} -> e_msg_MethodOptions(Msg);
      #'EnumOptions'{} -> e_msg_EnumOptions(Msg);
      #'EnumValueOptions'{} -> e_msg_EnumValueOptions(Msg);
      #'ServiceOptions'{} -> e_msg_ServiceOptions(Msg);
      #'MethodDescriptorProto'{} ->
	  e_msg_MethodDescriptorProto(Msg);
      #'ServiceDescriptorProto'{} ->
	  e_msg_ServiceDescriptorProto(Msg);
      #'MessageOptions'{} -> e_msg_MessageOptions(Msg);
      #'EnumValueDescriptorProto'{} ->
	  e_msg_EnumValueDescriptorProto(Msg);
      #'EnumDescriptorProto'{} ->
	  e_msg_EnumDescriptorProto(Msg);
      #'FieldOptions'{} -> e_msg_FieldOptions(Msg);
      #'FieldDescriptorProto'{} ->
	  e_msg_FieldDescriptorProto(Msg);
      #'DescriptorProto'{} -> e_msg_DescriptorProto(Msg);
      #'SourceCodeInfo.Location'{} ->
	  'e_msg_SourceCodeInfo.Location'(Msg);
      #'SourceCodeInfo'{} -> e_msg_SourceCodeInfo(Msg);
      #'FileDescriptorProto'{} ->
	  e_msg_FileDescriptorProto(Msg);
      #'FileDescriptorSet'{} -> e_msg_FileDescriptorSet(Msg)
    end.


'e_enum_FieldDescriptorProto.Type'('TYPE_DOUBLE',
				   Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_FLOAT', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_INT64', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_UINT64',
				   Bin) ->
    <<Bin/binary, 4>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_INT32', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_FIXED64',
				   Bin) ->
    <<Bin/binary, 6>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_FIXED32',
				   Bin) ->
    <<Bin/binary, 7>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_BOOL', Bin) ->
    <<Bin/binary, 8>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_STRING',
				   Bin) ->
    <<Bin/binary, 9>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_GROUP', Bin) ->
    <<Bin/binary, 10>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_MESSAGE',
				   Bin) ->
    <<Bin/binary, 11>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_BYTES', Bin) ->
    <<Bin/binary, 12>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_UINT32',
				   Bin) ->
    <<Bin/binary, 13>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_ENUM', Bin) ->
    <<Bin/binary, 14>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SFIXED32',
				   Bin) ->
    <<Bin/binary, 15>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SFIXED64',
				   Bin) ->
    <<Bin/binary, 16>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SINT32',
				   Bin) ->
    <<Bin/binary, 17>>;
'e_enum_FieldDescriptorProto.Type'('TYPE_SINT64',
				   Bin) ->
    <<Bin/binary, 18>>.

'e_enum_FieldDescriptorProto.Label'('LABEL_OPTIONAL',
				    Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldDescriptorProto.Label'('LABEL_REQUIRED',
				    Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FieldDescriptorProto.Label'('LABEL_REPEATED',
				    Bin) ->
    <<Bin/binary, 3>>.

'e_enum_FileOptions.OptimizeMode'('SPEED', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FileOptions.OptimizeMode'('CODE_SIZE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FileOptions.OptimizeMode'('LITE_RUNTIME',
				  Bin) ->
    <<Bin/binary, 3>>.

'e_enum_FieldOptions.CType'('STRING', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_FieldOptions.CType'('CORD', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FieldOptions.CType'('STRING_PIECE', Bin) ->
    <<Bin/binary, 2>>.

'e_msg_UninterpretedOption.NamePart'(Msg) ->
    'e_msg_UninterpretedOption.NamePart'(Msg, <<>>).


'e_msg_UninterpretedOption.NamePart'(#'UninterpretedOption.NamePart'{name_part
									 = F1,
								     is_extension
									 = F2},
				     Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_bool(F2, <<B1/binary, 16>>).

e_msg_UninterpretedOption(Msg) ->
    e_msg_UninterpretedOption(Msg, <<>>).


e_msg_UninterpretedOption(#'UninterpretedOption'{name =
						     F1,
						 identifier_value = F2,
						 positive_int_value = F3,
						 negative_int_value = F4,
						 double_value = F5,
						 string_value = F6,
						 aggregate_value = F7},
			  Bin) ->
    B1 = if F1 == [] -> Bin;
	    true -> e_field_UninterpretedOption_name(F1, Bin)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 26>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 32>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 40>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_double(F5, <<B4/binary, 49>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bytes(F6, <<B5/binary, 58>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_string(F7, <<B6/binary, 66>>)
    end.

'e_msg_DescriptorProto.ExtensionRange'(Msg) ->
    'e_msg_DescriptorProto.ExtensionRange'(Msg, <<>>).


'e_msg_DescriptorProto.ExtensionRange'(#'DescriptorProto.ExtensionRange'{start
									     =
									     F1,
									 'end' =
									     F2},
				       Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int32(F1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true -> e_type_int32(F2, <<B1/binary, 16>>)
    end.

e_msg_FileOptions(Msg) -> e_msg_FileOptions(Msg, <<>>).


e_msg_FileOptions(#'FileOptions'{java_package = F1,
				 java_outer_classname = F2,
				 java_multiple_files = F3,
				 java_generate_equals_and_hash = F4,
				 optimize_for = F5, cc_generic_services = F6,
				 java_generic_services = F7,
				 py_generic_services = F8,
				 uninterpreted_option = F9},
		  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 66>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 80>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bool(F4, <<B3/binary, 160, 1>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_enum_FileOptions.OptimizeMode'(F5, <<B4/binary, 72>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bool(F6, <<B5/binary, 128, 1>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_bool(F7, <<B6/binary, 136, 1>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bool(F8, <<B7/binary, 144, 1>>)
	 end,
    if F9 == [] -> B8;
       true -> e_field_FileOptions_uninterpreted_option(F9, B8)
    end.

e_msg_MethodOptions(Msg) ->
    e_msg_MethodOptions(Msg, <<>>).


e_msg_MethodOptions(#'MethodOptions'{uninterpreted_option
					 = F1},
		    Bin) ->
    if F1 == [] -> Bin;
       true ->
	   e_field_MethodOptions_uninterpreted_option(F1, Bin)
    end.

e_msg_EnumOptions(Msg) -> e_msg_EnumOptions(Msg, <<>>).


e_msg_EnumOptions(#'EnumOptions'{uninterpreted_option =
				     F1},
		  Bin) ->
    if F1 == [] -> Bin;
       true ->
	   e_field_EnumOptions_uninterpreted_option(F1, Bin)
    end.

e_msg_EnumValueOptions(Msg) ->
    e_msg_EnumValueOptions(Msg, <<>>).


e_msg_EnumValueOptions(#'EnumValueOptions'{uninterpreted_option
					       = F1},
		       Bin) ->
    if F1 == [] -> Bin;
       true ->
	   e_field_EnumValueOptions_uninterpreted_option(F1, Bin)
    end.

e_msg_ServiceOptions(Msg) ->
    e_msg_ServiceOptions(Msg, <<>>).


e_msg_ServiceOptions(#'ServiceOptions'{uninterpreted_option
					   = F1},
		     Bin) ->
    if F1 == [] -> Bin;
       true ->
	   e_field_ServiceOptions_uninterpreted_option(F1, Bin)
    end.

e_msg_MethodDescriptorProto(Msg) ->
    e_msg_MethodDescriptorProto(Msg, <<>>).


e_msg_MethodDescriptorProto(#'MethodDescriptorProto'{name
							 = F1,
						     input_type = F2,
						     output_type = F3,
						     options = F4},
			    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true ->
	   e_mfield_MethodDescriptorProto_options(F4,
						  <<B3/binary, 34>>)
    end.

e_msg_ServiceDescriptorProto(Msg) ->
    e_msg_ServiceDescriptorProto(Msg, <<>>).


e_msg_ServiceDescriptorProto(#'ServiceDescriptorProto'{name
							   = F1,
						       method = F2,
						       options = F3},
			     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == [] -> B1;
	    true -> e_field_ServiceDescriptorProto_method(F2, B1)
	 end,
    if F3 == undefined -> B2;
       true ->
	   e_mfield_ServiceDescriptorProto_options(F3,
						   <<B2/binary, 26>>)
    end.

e_msg_MessageOptions(Msg) ->
    e_msg_MessageOptions(Msg, <<>>).


e_msg_MessageOptions(#'MessageOptions'{message_set_wire_format
					   = F1,
				       no_standard_descriptor_accessor = F2,
				       uninterpreted_option = F3},
		     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_bool(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    if F3 == [] -> B2;
       true ->
	   e_field_MessageOptions_uninterpreted_option(F3, B2)
    end.

e_msg_EnumValueDescriptorProto(Msg) ->
    e_msg_EnumValueDescriptorProto(Msg, <<>>).


e_msg_EnumValueDescriptorProto(#'EnumValueDescriptorProto'{name
							       = F1,
							   number = F2,
							   options = F3},
			       Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   e_mfield_EnumValueDescriptorProto_options(F3,
						     <<B2/binary, 26>>)
    end.

e_msg_EnumDescriptorProto(Msg) ->
    e_msg_EnumDescriptorProto(Msg, <<>>).


e_msg_EnumDescriptorProto(#'EnumDescriptorProto'{name =
						     F1,
						 value = F2, options = F3},
			  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == [] -> B1;
	    true -> e_field_EnumDescriptorProto_value(F2, B1)
	 end,
    if F3 == undefined -> B2;
       true ->
	   e_mfield_EnumDescriptorProto_options(F3,
						<<B2/binary, 26>>)
    end.

e_msg_FieldOptions(Msg) ->
    e_msg_FieldOptions(Msg, <<>>).


e_msg_FieldOptions(#'FieldOptions'{ctype = F1,
				   packed = F2, deprecated = F3,
				   experimental_map_key = F4,
				   uninterpreted_option = F5},
		   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_FieldOptions.CType'(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 74>>)
	 end,
    if F5 == [] -> B4;
       true ->
	   e_field_FieldOptions_uninterpreted_option(F5, B4)
    end.

e_msg_FieldDescriptorProto(Msg) ->
    e_msg_FieldDescriptorProto(Msg, <<>>).


e_msg_FieldDescriptorProto(#'FieldDescriptorProto'{name
						       = F1,
						   number = F2, label = F3,
						   type = F4, type_name = F5,
						   extendee = F6,
						   default_value = F7,
						   options = F8},
			   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 24>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_enum_FieldDescriptorProto.Label'(F3,
						    <<B2/binary, 32>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_enum_FieldDescriptorProto.Type'(F4,
						   <<B3/binary, 40>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 50>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 18>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 58>>)
	 end,
    if F8 == undefined -> B7;
       true ->
	   e_mfield_FieldDescriptorProto_options(F8,
						 <<B7/binary, 66>>)
    end.

e_msg_DescriptorProto(Msg) ->
    e_msg_DescriptorProto(Msg, <<>>).


e_msg_DescriptorProto(#'DescriptorProto'{name = F1,
					 field = F2, extension = F3,
					 nested_type = F4, enum_type = F5,
					 extension_range = F6, options = F7},
		      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == [] -> B1;
	    true -> e_field_DescriptorProto_field(F2, B1)
	 end,
    B3 = if F3 == [] -> B2;
	    true -> e_field_DescriptorProto_extension(F3, B2)
	 end,
    B4 = if F4 == [] -> B3;
	    true -> e_field_DescriptorProto_nested_type(F4, B3)
	 end,
    B5 = if F5 == [] -> B4;
	    true -> e_field_DescriptorProto_enum_type(F5, B4)
	 end,
    B6 = if F6 == [] -> B5;
	    true -> e_field_DescriptorProto_extension_range(F6, B5)
	 end,
    if F7 == undefined -> B6;
       true ->
	   e_mfield_DescriptorProto_options(F7, <<B6/binary, 58>>)
    end.

'e_msg_SourceCodeInfo.Location'(Msg) ->
    'e_msg_SourceCodeInfo.Location'(Msg, <<>>).


'e_msg_SourceCodeInfo.Location'(#'SourceCodeInfo.Location'{path
							       = F1,
							   span = F2},
				Bin) ->
    B1 = if F1 == [] -> Bin;
	    true -> 'e_field_SourceCodeInfo.Location_path'(F1, Bin)
	 end,
    if F2 == [] -> B1;
       true -> 'e_field_SourceCodeInfo.Location_span'(F2, B1)
    end.

e_msg_SourceCodeInfo(Msg) ->
    e_msg_SourceCodeInfo(Msg, <<>>).


e_msg_SourceCodeInfo(#'SourceCodeInfo'{location = F1},
		     Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_SourceCodeInfo_location(F1, Bin)
    end.

e_msg_FileDescriptorProto(Msg) ->
    e_msg_FileDescriptorProto(Msg, <<>>).


e_msg_FileDescriptorProto(#'FileDescriptorProto'{name =
						     F1,
						 package = F2, dependency = F3,
						 message_type = F4,
						 enum_type = F5, service = F6,
						 extension = F7, options = F8,
						 source_code_info = F9},
			  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == [] -> B2;
	    true -> e_field_FileDescriptorProto_dependency(F3, B2)
	 end,
    B4 = if F4 == [] -> B3;
	    true -> e_field_FileDescriptorProto_message_type(F4, B3)
	 end,
    B5 = if F5 == [] -> B4;
	    true -> e_field_FileDescriptorProto_enum_type(F5, B4)
	 end,
    B6 = if F6 == [] -> B5;
	    true -> e_field_FileDescriptorProto_service(F6, B5)
	 end,
    B7 = if F7 == [] -> B6;
	    true -> e_field_FileDescriptorProto_extension(F7, B6)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		e_mfield_FileDescriptorProto_options(F8,
						     <<B7/binary, 66>>)
	 end,
    if F9 == undefined -> B8;
       true ->
	   e_mfield_FileDescriptorProto_source_code_info(F9,
							 <<B8/binary, 74>>)
    end.

e_msg_FileDescriptorSet(Msg) ->
    e_msg_FileDescriptorSet(Msg, <<>>).


e_msg_FileDescriptorSet(#'FileDescriptorSet'{file = F1},
			Bin) ->
    if F1 == [] -> Bin;
       true -> e_field_FileDescriptorSet_file(F1, Bin)
    end.

e_mfield_UninterpretedOption_name(Msg, Bin) ->
    SubBin = 'e_msg_UninterpretedOption.NamePart'(Msg,
						  <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UninterpretedOption_name([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_UninterpretedOption_name(Elem, Bin2),
    e_field_UninterpretedOption_name(Rest, Bin3);
e_field_UninterpretedOption_name([], Bin) -> Bin.

e_mfield_FileOptions_uninterpreted_option(Msg, Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileOptions_uninterpreted_option([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 = e_mfield_FileOptions_uninterpreted_option(Elem,
						     Bin2),
    e_field_FileOptions_uninterpreted_option(Rest, Bin3);
e_field_FileOptions_uninterpreted_option([], Bin) ->
    Bin.

e_mfield_MethodOptions_uninterpreted_option(Msg, Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MethodOptions_uninterpreted_option([Elem
					    | Rest],
					   Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 = e_mfield_MethodOptions_uninterpreted_option(Elem,
						       Bin2),
    e_field_MethodOptions_uninterpreted_option(Rest, Bin3);
e_field_MethodOptions_uninterpreted_option([], Bin) ->
    Bin.

e_mfield_EnumOptions_uninterpreted_option(Msg, Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EnumOptions_uninterpreted_option([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 = e_mfield_EnumOptions_uninterpreted_option(Elem,
						     Bin2),
    e_field_EnumOptions_uninterpreted_option(Rest, Bin3);
e_field_EnumOptions_uninterpreted_option([], Bin) ->
    Bin.

e_mfield_EnumValueOptions_uninterpreted_option(Msg,
					       Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EnumValueOptions_uninterpreted_option([Elem
					       | Rest],
					      Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_EnumValueOptions_uninterpreted_option(Elem,
						       Bin2),
    e_field_EnumValueOptions_uninterpreted_option(Rest,
						  Bin3);
e_field_EnumValueOptions_uninterpreted_option([],
					      Bin) ->
    Bin.

e_mfield_ServiceOptions_uninterpreted_option(Msg,
					     Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServiceOptions_uninterpreted_option([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_ServiceOptions_uninterpreted_option(Elem,
						     Bin2),
    e_field_ServiceOptions_uninterpreted_option(Rest, Bin3);
e_field_ServiceOptions_uninterpreted_option([], Bin) ->
    Bin.

e_mfield_MethodDescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_MethodOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServiceDescriptorProto_method(Msg, Bin) ->
    SubBin = e_msg_MethodDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServiceDescriptorProto_method([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ServiceDescriptorProto_method(Elem,
						  Bin2),
    e_field_ServiceDescriptorProto_method(Rest, Bin3);
e_field_ServiceDescriptorProto_method([], Bin) -> Bin.

e_mfield_ServiceDescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_ServiceOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MessageOptions_uninterpreted_option(Msg,
					     Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MessageOptions_uninterpreted_option([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 =
	e_mfield_MessageOptions_uninterpreted_option(Elem,
						     Bin2),
    e_field_MessageOptions_uninterpreted_option(Rest, Bin3);
e_field_MessageOptions_uninterpreted_option([], Bin) ->
    Bin.

e_mfield_EnumValueDescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_EnumValueOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_EnumDescriptorProto_value(Msg, Bin) ->
    SubBin = e_msg_EnumValueDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_EnumDescriptorProto_value([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_EnumDescriptorProto_value(Elem, Bin2),
    e_field_EnumDescriptorProto_value(Rest, Bin3);
e_field_EnumDescriptorProto_value([], Bin) -> Bin.

e_mfield_EnumDescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_EnumOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FieldOptions_uninterpreted_option(Msg, Bin) ->
    SubBin = e_msg_UninterpretedOption(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FieldOptions_uninterpreted_option([Elem | Rest],
					  Bin) ->
    Bin2 = <<Bin/binary, 186, 62>>,
    Bin3 = e_mfield_FieldOptions_uninterpreted_option(Elem,
						      Bin2),
    e_field_FieldOptions_uninterpreted_option(Rest, Bin3);
e_field_FieldOptions_uninterpreted_option([], Bin) ->
    Bin.

e_mfield_FieldDescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_FieldOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DescriptorProto_field(Msg, Bin) ->
    SubBin = e_msg_FieldDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_field([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_DescriptorProto_field(Elem, Bin2),
    e_field_DescriptorProto_field(Rest, Bin3);
e_field_DescriptorProto_field([], Bin) -> Bin.

e_mfield_DescriptorProto_extension(Msg, Bin) ->
    SubBin = e_msg_FieldDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_extension([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_DescriptorProto_extension(Elem, Bin2),
    e_field_DescriptorProto_extension(Rest, Bin3);
e_field_DescriptorProto_extension([], Bin) -> Bin.

e_mfield_DescriptorProto_nested_type(Msg, Bin) ->
    SubBin = e_msg_DescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_nested_type([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_DescriptorProto_nested_type(Elem, Bin2),
    e_field_DescriptorProto_nested_type(Rest, Bin3);
e_field_DescriptorProto_nested_type([], Bin) -> Bin.

e_mfield_DescriptorProto_enum_type(Msg, Bin) ->
    SubBin = e_msg_EnumDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_enum_type([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_DescriptorProto_enum_type(Elem, Bin2),
    e_field_DescriptorProto_enum_type(Rest, Bin3);
e_field_DescriptorProto_enum_type([], Bin) -> Bin.

e_mfield_DescriptorProto_extension_range(Msg, Bin) ->
    SubBin = 'e_msg_DescriptorProto.ExtensionRange'(Msg,
						    <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescriptorProto_extension_range([Elem | Rest],
					Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_DescriptorProto_extension_range(Elem,
						    Bin2),
    e_field_DescriptorProto_extension_range(Rest, Bin3);
e_field_DescriptorProto_extension_range([], Bin) -> Bin.

e_mfield_DescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_MessageOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_SourceCodeInfo.Location_path'(Elems, Bin)
    when Elems =/= [] ->
    SubBin = 'e_pfield_SourceCodeInfo.Location_path'(Elems,
						     <<>>),
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_SourceCodeInfo.Location_path'([], Bin) -> Bin.

'e_pfield_SourceCodeInfo.Location_path'([Value | Rest],
					Bin) ->
    Bin2 = e_type_int32(Value, Bin),
    'e_pfield_SourceCodeInfo.Location_path'(Rest, Bin2);
'e_pfield_SourceCodeInfo.Location_path'([], Bin) -> Bin.

'e_field_SourceCodeInfo.Location_span'(Elems, Bin)
    when Elems =/= [] ->
    SubBin = 'e_pfield_SourceCodeInfo.Location_span'(Elems,
						     <<>>),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_SourceCodeInfo.Location_span'([], Bin) -> Bin.

'e_pfield_SourceCodeInfo.Location_span'([Value | Rest],
					Bin) ->
    Bin2 = e_type_int32(Value, Bin),
    'e_pfield_SourceCodeInfo.Location_span'(Rest, Bin2);
'e_pfield_SourceCodeInfo.Location_span'([], Bin) -> Bin.

e_mfield_SourceCodeInfo_location(Msg, Bin) ->
    SubBin = 'e_msg_SourceCodeInfo.Location'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SourceCodeInfo_location([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_SourceCodeInfo_location(Elem, Bin2),
    e_field_SourceCodeInfo_location(Rest, Bin3);
e_field_SourceCodeInfo_location([], Bin) -> Bin.

e_field_FileDescriptorProto_dependency([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(Elem, Bin2),
    e_field_FileDescriptorProto_dependency(Rest, Bin3);
e_field_FileDescriptorProto_dependency([], Bin) -> Bin.

e_mfield_FileDescriptorProto_message_type(Msg, Bin) ->
    SubBin = e_msg_DescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_message_type([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_FileDescriptorProto_message_type(Elem,
						     Bin2),
    e_field_FileDescriptorProto_message_type(Rest, Bin3);
e_field_FileDescriptorProto_message_type([], Bin) ->
    Bin.

e_mfield_FileDescriptorProto_enum_type(Msg, Bin) ->
    SubBin = e_msg_EnumDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_enum_type([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_FileDescriptorProto_enum_type(Elem,
						  Bin2),
    e_field_FileDescriptorProto_enum_type(Rest, Bin3);
e_field_FileDescriptorProto_enum_type([], Bin) -> Bin.

e_mfield_FileDescriptorProto_service(Msg, Bin) ->
    SubBin = e_msg_ServiceDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_service([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_FileDescriptorProto_service(Elem, Bin2),
    e_field_FileDescriptorProto_service(Rest, Bin3);
e_field_FileDescriptorProto_service([], Bin) -> Bin.

e_mfield_FileDescriptorProto_extension(Msg, Bin) ->
    SubBin = e_msg_FieldDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorProto_extension([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_FileDescriptorProto_extension(Elem,
						  Bin2),
    e_field_FileDescriptorProto_extension(Rest, Bin3);
e_field_FileDescriptorProto_extension([], Bin) -> Bin.

e_mfield_FileDescriptorProto_options(Msg, Bin) ->
    SubBin = e_msg_FileOptions(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FileDescriptorProto_source_code_info(Msg,
					      Bin) ->
    SubBin = e_msg_SourceCodeInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FileDescriptorSet_file(Msg, Bin) ->
    SubBin = e_msg_FileDescriptorProto(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FileDescriptorSet_file([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_FileDescriptorSet_file(Elem, Bin2),
    e_field_FileDescriptorSet_file(Rest, Bin3);
e_field_FileDescriptorSet_file([], Bin) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_type_double(Value, Bin) ->
    <<Bin/binary, Value:64/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'UninterpretedOption.NamePart' ->
	  'd_msg_UninterpretedOption.NamePart'(Bin);
      'UninterpretedOption' -> d_msg_UninterpretedOption(Bin);
      'DescriptorProto.ExtensionRange' ->
	  'd_msg_DescriptorProto.ExtensionRange'(Bin);
      'FileOptions' -> d_msg_FileOptions(Bin);
      'MethodOptions' -> d_msg_MethodOptions(Bin);
      'EnumOptions' -> d_msg_EnumOptions(Bin);
      'EnumValueOptions' -> d_msg_EnumValueOptions(Bin);
      'ServiceOptions' -> d_msg_ServiceOptions(Bin);
      'MethodDescriptorProto' ->
	  d_msg_MethodDescriptorProto(Bin);
      'ServiceDescriptorProto' ->
	  d_msg_ServiceDescriptorProto(Bin);
      'MessageOptions' -> d_msg_MessageOptions(Bin);
      'EnumValueDescriptorProto' ->
	  d_msg_EnumValueDescriptorProto(Bin);
      'EnumDescriptorProto' -> d_msg_EnumDescriptorProto(Bin);
      'FieldOptions' -> d_msg_FieldOptions(Bin);
      'FieldDescriptorProto' ->
	  d_msg_FieldDescriptorProto(Bin);
      'DescriptorProto' -> d_msg_DescriptorProto(Bin);
      'SourceCodeInfo.Location' ->
	  'd_msg_SourceCodeInfo.Location'(Bin);
      'SourceCodeInfo' -> d_msg_SourceCodeInfo(Bin);
      'FileDescriptorProto' -> d_msg_FileDescriptorProto(Bin);
      'FileDescriptorSet' -> d_msg_FileDescriptorSet(Bin)
    end.



'd_enum_FieldDescriptorProto.Type'(1) -> 'TYPE_DOUBLE';
'd_enum_FieldDescriptorProto.Type'(2) -> 'TYPE_FLOAT';
'd_enum_FieldDescriptorProto.Type'(3) -> 'TYPE_INT64';
'd_enum_FieldDescriptorProto.Type'(4) -> 'TYPE_UINT64';
'd_enum_FieldDescriptorProto.Type'(5) -> 'TYPE_INT32';
'd_enum_FieldDescriptorProto.Type'(6) -> 'TYPE_FIXED64';
'd_enum_FieldDescriptorProto.Type'(7) -> 'TYPE_FIXED32';
'd_enum_FieldDescriptorProto.Type'(8) -> 'TYPE_BOOL';
'd_enum_FieldDescriptorProto.Type'(9) -> 'TYPE_STRING';
'd_enum_FieldDescriptorProto.Type'(10) -> 'TYPE_GROUP';
'd_enum_FieldDescriptorProto.Type'(11) ->
    'TYPE_MESSAGE';
'd_enum_FieldDescriptorProto.Type'(12) -> 'TYPE_BYTES';
'd_enum_FieldDescriptorProto.Type'(13) -> 'TYPE_UINT32';
'd_enum_FieldDescriptorProto.Type'(14) -> 'TYPE_ENUM';
'd_enum_FieldDescriptorProto.Type'(15) ->
    'TYPE_SFIXED32';
'd_enum_FieldDescriptorProto.Type'(16) ->
    'TYPE_SFIXED64';
'd_enum_FieldDescriptorProto.Type'(17) -> 'TYPE_SINT32';
'd_enum_FieldDescriptorProto.Type'(18) -> 'TYPE_SINT64'.

'd_enum_FieldDescriptorProto.Label'(1) ->
    'LABEL_OPTIONAL';
'd_enum_FieldDescriptorProto.Label'(2) ->
    'LABEL_REQUIRED';
'd_enum_FieldDescriptorProto.Label'(3) ->
    'LABEL_REPEATED'.

'd_enum_FileOptions.OptimizeMode'(1) -> 'SPEED';
'd_enum_FileOptions.OptimizeMode'(2) -> 'CODE_SIZE';
'd_enum_FileOptions.OptimizeMode'(3) -> 'LITE_RUNTIME'.

'd_enum_FieldOptions.CType'(0) -> 'STRING';
'd_enum_FieldOptions.CType'(1) -> 'CORD';
'd_enum_FieldOptions.CType'(2) -> 'STRING_PIECE'.

'd_msg_UninterpretedOption.NamePart'(Bin) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Bin,
						      0, 0, undefined,
						      undefined).

'dfp_read_field_def_UninterpretedOption.NamePart'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F1, F2) ->
    'd_field_UninterpretedOption.NamePart_name_part'(Rest,
						     Z1, Z2, F1, F2);
'dfp_read_field_def_UninterpretedOption.NamePart'(<<16,
						    Rest/binary>>,
						  Z1, Z2, F1, F2) ->
    'd_field_UninterpretedOption.NamePart_is_extension'(Rest,
							Z1, Z2, F1, F2);
'dfp_read_field_def_UninterpretedOption.NamePart'(<<>>,
						  0, 0, F1, F2) ->
    #'UninterpretedOption.NamePart'{name_part = F1,
				    is_extension = F2};
'dfp_read_field_def_UninterpretedOption.NamePart'(Other,
						  Z1, Z2, F1, F2) ->
    'dg_read_field_def_UninterpretedOption.NamePart'(Other,
						     Z1, Z2, F1, F2).

'dg_read_field_def_UninterpretedOption.NamePart'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_UninterpretedOption.NamePart'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2);
'dg_read_field_def_UninterpretedOption.NamePart'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_UninterpretedOption.NamePart_name_part'(Rest,
							   0, 0, F1, F2);
      16 ->
	  'd_field_UninterpretedOption.NamePart_is_extension'(Rest,
							      0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_UninterpretedOption.NamePart'(Rest, 0, 0,
							   F1, F2);
	    1 ->
		'skip_64_UninterpretedOption.NamePart'(Rest, 0, 0, F1,
						       F2);
	    2 ->
		'skip_length_delimited_UninterpretedOption.NamePart'(Rest,
								     0, 0, F1,
								     F2);
	    5 ->
		'skip_32_UninterpretedOption.NamePart'(Rest, 0, 0, F1,
						       F2)
	  end
    end;
'dg_read_field_def_UninterpretedOption.NamePart'(<<>>,
						 0, 0, F1, F2) ->
    #'UninterpretedOption.NamePart'{name_part = F1,
				    is_extension = F2}.

'd_field_UninterpretedOption.NamePart_name_part'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2)
    when N < 57 ->
    'd_field_UninterpretedOption.NamePart_name_part'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2);
'd_field_UninterpretedOption.NamePart_name_part'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest2,
						      0, 0, NewFValue, F2).


'd_field_UninterpretedOption.NamePart_is_extension'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_UninterpretedOption.NamePart_is_extension'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2);
'd_field_UninterpretedOption.NamePart_is_extension'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      0, 0, F1, NewFValue).


'skip_varint_UninterpretedOption.NamePart'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'skip_varint_UninterpretedOption.NamePart'(Rest, Z1, Z2,
					       F1, F2);
'skip_varint_UninterpretedOption.NamePart'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      Z1, Z2, F1, F2).


'skip_length_delimited_UninterpretedOption.NamePart'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_UninterpretedOption.NamePart'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2);
'skip_length_delimited_UninterpretedOption.NamePart'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest2,
						      0, 0, F1, F2).


'skip_32_UninterpretedOption.NamePart'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      Z1, Z2, F1, F2).


'skip_64_UninterpretedOption.NamePart'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_UninterpretedOption.NamePart'(Rest,
						      Z1, Z2, F1, F2).


d_msg_UninterpretedOption(Bin) ->
    dfp_read_field_def_UninterpretedOption(Bin, 0, 0, [],
					   undefined, undefined, undefined,
					   undefined, undefined, undefined).

dfp_read_field_def_UninterpretedOption(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_name(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7);
dfp_read_field_def_UninterpretedOption(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_identifier_value(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 F7);
dfp_read_field_def_UninterpretedOption(<<32,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_positive_int_value(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7);
dfp_read_field_def_UninterpretedOption(<<40,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_negative_int_value(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7);
dfp_read_field_def_UninterpretedOption(<<49,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_double_value(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
dfp_read_field_def_UninterpretedOption(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_string_value(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
dfp_read_field_def_UninterpretedOption(<<66,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_UninterpretedOption_aggregate_value(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7);
dfp_read_field_def_UninterpretedOption(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7) ->
    #'UninterpretedOption'{name = lists:reverse(F1),
			   identifier_value = F2, positive_int_value = F3,
			   negative_int_value = F4, double_value = F5,
			   string_value = F6, aggregate_value = F7};
dfp_read_field_def_UninterpretedOption(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7) ->
    dg_read_field_def_UninterpretedOption(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7).

dg_read_field_def_UninterpretedOption(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_UninterpretedOption(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7);
dg_read_field_def_UninterpretedOption(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_UninterpretedOption_name(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7);
      26 ->
	  d_field_UninterpretedOption_identifier_value(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7);
      32 ->
	  d_field_UninterpretedOption_positive_int_value(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7);
      40 ->
	  d_field_UninterpretedOption_negative_int_value(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7);
      49 ->
	  d_field_UninterpretedOption_double_value(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      58 ->
	  d_field_UninterpretedOption_string_value(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      66 ->
	  d_field_UninterpretedOption_aggregate_value(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UninterpretedOption(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7);
	    1 ->
		skip_64_UninterpretedOption(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7);
	    2 ->
		skip_length_delimited_UninterpretedOption(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7);
	    5 ->
		skip_32_UninterpretedOption(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7)
	  end
    end;
dg_read_field_def_UninterpretedOption(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7) ->
    #'UninterpretedOption'{name = lists:reverse(F1),
			   identifier_value = F2, positive_int_value = F3,
			   negative_int_value = F4, double_value = F5,
			   string_value = F6, aggregate_value = F7}.

d_field_UninterpretedOption_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_UninterpretedOption_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_UninterpretedOption_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'UninterpretedOption.NamePart'),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0,
					   [NewFValue | F1], F2, F3, F4, F5, F6,
					   F7).


d_field_UninterpretedOption_identifier_value(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_UninterpretedOption_identifier_value(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7);
d_field_UninterpretedOption_identifier_value(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, _, F3, F4, F5, F6,
					     F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7).


d_field_UninterpretedOption_positive_int_value(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7)
    when N < 57 ->
    d_field_UninterpretedOption_positive_int_value(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7);
d_field_UninterpretedOption_positive_int_value(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, _, F4, F5, F6,
					       F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_UninterpretedOption(Rest, 0, 0, F1,
					   F2, NewFValue, F4, F5, F6, F7).


d_field_UninterpretedOption_negative_int_value(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7)
    when N < 57 ->
    d_field_UninterpretedOption_negative_int_value(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7);
d_field_UninterpretedOption_negative_int_value(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, _, F5, F6,
					       F7) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UninterpretedOption(Rest, 0, 0, F1,
					   F2, F3, NewFValue, F5, F6, F7).


d_field_UninterpretedOption_double_value(<<Value:64/little-float,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, _, F6, F7) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, Value, F6, F7).


d_field_UninterpretedOption_string_value(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_UninterpretedOption_string_value(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
d_field_UninterpretedOption_string_value(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, _, F7) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, NewFValue, F7).


d_field_UninterpretedOption_aggregate_value(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_UninterpretedOption_aggregate_value(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7);
d_field_UninterpretedOption_aggregate_value(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6,
					    _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, NewFValue).


skip_varint_UninterpretedOption(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_UninterpretedOption(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7);
skip_varint_UninterpretedOption(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7).


skip_length_delimited_UninterpretedOption(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_UninterpretedOption(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7);
skip_length_delimited_UninterpretedOption(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UninterpretedOption(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7).


skip_32_UninterpretedOption(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7).


skip_64_UninterpretedOption(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_UninterpretedOption(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7).


'd_msg_DescriptorProto.ExtensionRange'(Bin) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Bin,
							0, 0, undefined,
							undefined).

'dfp_read_field_def_DescriptorProto.ExtensionRange'(<<8,
						      Rest/binary>>,
						    Z1, Z2, F1, F2) ->
    'd_field_DescriptorProto.ExtensionRange_start'(Rest, Z1,
						   Z2, F1, F2);
'dfp_read_field_def_DescriptorProto.ExtensionRange'(<<16,
						      Rest/binary>>,
						    Z1, Z2, F1, F2) ->
    'd_field_DescriptorProto.ExtensionRange_end'(Rest, Z1,
						 Z2, F1, F2);
'dfp_read_field_def_DescriptorProto.ExtensionRange'(<<>>,
						    0, 0, F1, F2) ->
    #'DescriptorProto.ExtensionRange'{start = F1,
				      'end' = F2};
'dfp_read_field_def_DescriptorProto.ExtensionRange'(Other,
						    Z1, Z2, F1, F2) ->
    'dg_read_field_def_DescriptorProto.ExtensionRange'(Other,
						       Z1, Z2, F1, F2).

'dg_read_field_def_DescriptorProto.ExtensionRange'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_DescriptorProto.ExtensionRange'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2);
'dg_read_field_def_DescriptorProto.ExtensionRange'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_DescriptorProto.ExtensionRange_start'(Rest, 0,
							 0, F1, F2);
      16 ->
	  'd_field_DescriptorProto.ExtensionRange_end'(Rest, 0, 0,
						       F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_DescriptorProto.ExtensionRange'(Rest, 0, 0,
							     F1, F2);
	    1 ->
		'skip_64_DescriptorProto.ExtensionRange'(Rest, 0, 0, F1,
							 F2);
	    2 ->
		'skip_length_delimited_DescriptorProto.ExtensionRange'(Rest,
								       0, 0, F1,
								       F2);
	    5 ->
		'skip_32_DescriptorProto.ExtensionRange'(Rest, 0, 0, F1,
							 F2)
	  end
    end;
'dg_read_field_def_DescriptorProto.ExtensionRange'(<<>>,
						   0, 0, F1, F2) ->
    #'DescriptorProto.ExtensionRange'{start = F1,
				      'end' = F2}.

'd_field_DescriptorProto.ExtensionRange_start'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_DescriptorProto.ExtensionRange_start'(Rest,
						   N + 7, X bsl N + Acc, F1,
						   F2);
'd_field_DescriptorProto.ExtensionRange_start'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							0, 0, NewFValue, F2).


'd_field_DescriptorProto.ExtensionRange_end'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_DescriptorProto.ExtensionRange_end'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'd_field_DescriptorProto.ExtensionRange_end'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							0, 0, F1, NewFValue).


'skip_varint_DescriptorProto.ExtensionRange'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'skip_varint_DescriptorProto.ExtensionRange'(Rest, Z1,
						 Z2, F1, F2);
'skip_varint_DescriptorProto.ExtensionRange'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							Z1, Z2, F1, F2).


'skip_length_delimited_DescriptorProto.ExtensionRange'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_DescriptorProto.ExtensionRange'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2);
'skip_length_delimited_DescriptorProto.ExtensionRange'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest2,
							0, 0, F1, F2).


'skip_32_DescriptorProto.ExtensionRange'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							Z1, Z2, F1, F2).


'skip_64_DescriptorProto.ExtensionRange'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2) ->
    'dfp_read_field_def_DescriptorProto.ExtensionRange'(Rest,
							Z1, Z2, F1, F2).


d_msg_FileOptions(Bin) ->
    dfp_read_field_def_FileOptions(Bin, 0, 0, undefined,
				   undefined, undefined, undefined, undefined,
				   undefined, undefined, undefined, []).

dfp_read_field_def_FileOptions(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_java_package(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileOptions(<<66, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_java_outer_classname(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8,
					     F9);
dfp_read_field_def_FileOptions(<<80, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_java_multiple_files(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileOptions(<<160, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_java_generate_equals_and_hash(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9);
dfp_read_field_def_FileOptions(<<72, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_optimize_for(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileOptions(<<128, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_cc_generic_services(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileOptions(<<136, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_java_generic_services(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9);
dfp_read_field_def_FileOptions(<<144, 1, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_py_generic_services(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileOptions(<<186, 62, Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_FileOptions_uninterpreted_option(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8,
					     F9);
dfp_read_field_def_FileOptions(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9) ->
    #'FileOptions'{java_package = F1,
		   java_outer_classname = F2, java_multiple_files = F3,
		   java_generate_equals_and_hash = F4, optimize_for = F5,
		   cc_generic_services = F6, java_generic_services = F7,
		   py_generic_services = F8,
		   uninterpreted_option = lists:reverse(F9)};
dfp_read_field_def_FileOptions(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7, F8, F9) ->
    dg_read_field_def_FileOptions(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9).

dg_read_field_def_FileOptions(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 32 - 7 ->
    dg_read_field_def_FileOptions(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9);
dg_read_field_def_FileOptions(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FileOptions_java_package(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      66 ->
	  d_field_FileOptions_java_outer_classname(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9);
      80 ->
	  d_field_FileOptions_java_multiple_files(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9);
      160 ->
	  d_field_FileOptions_java_generate_equals_and_hash(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9);
      72 ->
	  d_field_FileOptions_optimize_for(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      128 ->
	  d_field_FileOptions_cc_generic_services(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9);
      136 ->
	  d_field_FileOptions_java_generic_services(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9);
      144 ->
	  d_field_FileOptions_py_generic_services(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9);
      7994 ->
	  d_field_FileOptions_uninterpreted_option(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FileOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9);
	    1 ->
		skip_64_FileOptions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9);
	    2 ->
		skip_length_delimited_FileOptions(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9);
	    5 ->
		skip_32_FileOptions(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7, F8, F9)
	  end
    end;
dg_read_field_def_FileOptions(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9) ->
    #'FileOptions'{java_package = F1,
		   java_outer_classname = F2, java_multiple_files = F3,
		   java_generate_equals_and_hash = F4, optimize_for = F5,
		   cc_generic_services = F6, java_generic_services = F7,
		   py_generic_services = F8,
		   uninterpreted_option = lists:reverse(F9)}.

d_field_FileOptions_java_package(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileOptions_java_package(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
d_field_FileOptions_java_package(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7, F8, F9).


d_field_FileOptions_java_outer_classname(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9)
    when N < 57 ->
    d_field_FileOptions_java_outer_classname(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9);
d_field_FileOptions_java_outer_classname(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
					 F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7, F8, F9).


d_field_FileOptions_java_multiple_files(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9)
    when N < 57 ->
    d_field_FileOptions_java_multiple_files(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9);
d_field_FileOptions_java_multiple_files(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
					F9) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6, F7, F8, F9).


d_field_FileOptions_java_generate_equals_and_hash(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileOptions_java_generate_equals_and_hash(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9);
d_field_FileOptions_java_generate_equals_and_hash(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, _, F5, F6,
						  F7, F8, F9) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7, F8, F9).


d_field_FileOptions_optimize_for(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileOptions_optimize_for(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
d_field_FileOptions_optimize_for(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FileOptions.OptimizeMode'(Tmp),
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7, F8, F9).


d_field_FileOptions_cc_generic_services(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9)
    when N < 57 ->
    d_field_FileOptions_cc_generic_services(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9);
d_field_FileOptions_cc_generic_services(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
					F9) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7, F8, F9).


d_field_FileOptions_java_generic_services(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 57 ->
    d_field_FileOptions_java_generic_services(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
d_field_FileOptions_java_generic_services(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
					  F9) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue, F8, F9).


d_field_FileOptions_py_generic_services(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9)
    when N < 57 ->
    d_field_FileOptions_py_generic_services(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9);
d_field_FileOptions_py_generic_services(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
					F9) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FileOptions(Rest, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, NewFValue, F9).


d_field_FileOptions_uninterpreted_option(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9)
    when N < 57 ->
    d_field_FileOptions_uninterpreted_option(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9);
d_field_FileOptions_uninterpreted_option(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, [NewFValue | F9]).


skip_varint_FileOptions(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    skip_varint_FileOptions(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9);
skip_varint_FileOptions(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_FileOptions(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9).


skip_length_delimited_FileOptions(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    skip_length_delimited_FileOptions(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9);
skip_length_delimited_FileOptions(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileOptions(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9).


skip_32_FileOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_FileOptions(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9).


skip_64_FileOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_FileOptions(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9).


d_msg_MethodOptions(Bin) ->
    dfp_read_field_def_MethodOptions(Bin, 0, 0, []).

dfp_read_field_def_MethodOptions(<<186, 62,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    d_field_MethodOptions_uninterpreted_option(Rest, Z1, Z2,
					       F1);
dfp_read_field_def_MethodOptions(<<>>, 0, 0, F1) ->
    #'MethodOptions'{uninterpreted_option =
			 lists:reverse(F1)};
dfp_read_field_def_MethodOptions(Other, Z1, Z2, F1) ->
    dg_read_field_def_MethodOptions(Other, Z1, Z2, F1).

dg_read_field_def_MethodOptions(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_MethodOptions(Rest, N + 7,
				    X bsl N + Acc, F1);
dg_read_field_def_MethodOptions(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      7994 ->
	  d_field_MethodOptions_uninterpreted_option(Rest, 0, 0,
						     F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_MethodOptions(Rest, 0, 0, F1);
	    1 -> skip_64_MethodOptions(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_MethodOptions(Rest, 0, 0, F1);
	    5 -> skip_32_MethodOptions(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_MethodOptions(<<>>, 0, 0, F1) ->
    #'MethodOptions'{uninterpreted_option =
			 lists:reverse(F1)}.

d_field_MethodOptions_uninterpreted_option(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 57 ->
    d_field_MethodOptions_uninterpreted_option(Rest, N + 7,
					       X bsl N + Acc, F1);
d_field_MethodOptions_uninterpreted_option(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_MethodOptions(Rest2, 0, 0,
				     [NewFValue | F1]).


skip_varint_MethodOptions(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1) ->
    skip_varint_MethodOptions(Rest, Z1, Z2, F1);
skip_varint_MethodOptions(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1) ->
    dfp_read_field_def_MethodOptions(Rest, Z1, Z2, F1).


skip_length_delimited_MethodOptions(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_MethodOptions(Rest, N + 7,
					X bsl N + Acc, F1);
skip_length_delimited_MethodOptions(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MethodOptions(Rest2, 0, 0, F1).


skip_32_MethodOptions(<<_:32, Rest/binary>>, Z1, Z2,
		      F1) ->
    dfp_read_field_def_MethodOptions(Rest, Z1, Z2, F1).


skip_64_MethodOptions(<<_:64, Rest/binary>>, Z1, Z2,
		      F1) ->
    dfp_read_field_def_MethodOptions(Rest, Z1, Z2, F1).


d_msg_EnumOptions(Bin) ->
    dfp_read_field_def_EnumOptions(Bin, 0, 0, []).

dfp_read_field_def_EnumOptions(<<186, 62, Rest/binary>>,
			       Z1, Z2, F1) ->
    d_field_EnumOptions_uninterpreted_option(Rest, Z1, Z2,
					     F1);
dfp_read_field_def_EnumOptions(<<>>, 0, 0, F1) ->
    #'EnumOptions'{uninterpreted_option =
		       lists:reverse(F1)};
dfp_read_field_def_EnumOptions(Other, Z1, Z2, F1) ->
    dg_read_field_def_EnumOptions(Other, Z1, Z2, F1).

dg_read_field_def_EnumOptions(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_EnumOptions(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_EnumOptions(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      7994 ->
	  d_field_EnumOptions_uninterpreted_option(Rest, 0, 0,
						   F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_EnumOptions(Rest, 0, 0, F1);
	    1 -> skip_64_EnumOptions(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_EnumOptions(Rest, 0, 0, F1);
	    5 -> skip_32_EnumOptions(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_EnumOptions(<<>>, 0, 0, F1) ->
    #'EnumOptions'{uninterpreted_option =
		       lists:reverse(F1)}.

d_field_EnumOptions_uninterpreted_option(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    d_field_EnumOptions_uninterpreted_option(Rest, N + 7,
					     X bsl N + Acc, F1);
d_field_EnumOptions_uninterpreted_option(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_EnumOptions(Rest2, 0, 0,
				   [NewFValue | F1]).


skip_varint_EnumOptions(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_EnumOptions(Rest, Z1, Z2, F1);
skip_varint_EnumOptions(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_EnumOptions(Rest, Z1, Z2, F1).


skip_length_delimited_EnumOptions(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_EnumOptions(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_EnumOptions(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumOptions(Rest2, 0, 0, F1).


skip_32_EnumOptions(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_EnumOptions(Rest, Z1, Z2, F1).


skip_64_EnumOptions(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_EnumOptions(Rest, Z1, Z2, F1).


d_msg_EnumValueOptions(Bin) ->
    dfp_read_field_def_EnumValueOptions(Bin, 0, 0, []).

dfp_read_field_def_EnumValueOptions(<<186, 62,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    d_field_EnumValueOptions_uninterpreted_option(Rest, Z1,
						  Z2, F1);
dfp_read_field_def_EnumValueOptions(<<>>, 0, 0, F1) ->
    #'EnumValueOptions'{uninterpreted_option =
			    lists:reverse(F1)};
dfp_read_field_def_EnumValueOptions(Other, Z1, Z2,
				    F1) ->
    dg_read_field_def_EnumValueOptions(Other, Z1, Z2, F1).

dg_read_field_def_EnumValueOptions(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_EnumValueOptions(Rest, N + 7,
				       X bsl N + Acc, F1);
dg_read_field_def_EnumValueOptions(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      7994 ->
	  d_field_EnumValueOptions_uninterpreted_option(Rest, 0,
							0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_EnumValueOptions(Rest, 0, 0, F1);
	    1 -> skip_64_EnumValueOptions(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_EnumValueOptions(Rest, 0, 0, F1);
	    5 -> skip_32_EnumValueOptions(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_EnumValueOptions(<<>>, 0, 0, F1) ->
    #'EnumValueOptions'{uninterpreted_option =
			    lists:reverse(F1)}.

d_field_EnumValueOptions_uninterpreted_option(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    d_field_EnumValueOptions_uninterpreted_option(Rest,
						  N + 7, X bsl N + Acc, F1);
d_field_EnumValueOptions_uninterpreted_option(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_EnumValueOptions(Rest2, 0, 0,
					[NewFValue | F1]).


skip_varint_EnumValueOptions(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    skip_varint_EnumValueOptions(Rest, Z1, Z2, F1);
skip_varint_EnumValueOptions(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    dfp_read_field_def_EnumValueOptions(Rest, Z1, Z2, F1).


skip_length_delimited_EnumValueOptions(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_EnumValueOptions(Rest, N + 7,
					   X bsl N + Acc, F1);
skip_length_delimited_EnumValueOptions(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumValueOptions(Rest2, 0, 0, F1).


skip_32_EnumValueOptions(<<_:32, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_EnumValueOptions(Rest, Z1, Z2, F1).


skip_64_EnumValueOptions(<<_:64, Rest/binary>>, Z1, Z2,
			 F1) ->
    dfp_read_field_def_EnumValueOptions(Rest, Z1, Z2, F1).


d_msg_ServiceOptions(Bin) ->
    dfp_read_field_def_ServiceOptions(Bin, 0, 0, []).

dfp_read_field_def_ServiceOptions(<<186, 62,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    d_field_ServiceOptions_uninterpreted_option(Rest, Z1,
						Z2, F1);
dfp_read_field_def_ServiceOptions(<<>>, 0, 0, F1) ->
    #'ServiceOptions'{uninterpreted_option =
			  lists:reverse(F1)};
dfp_read_field_def_ServiceOptions(Other, Z1, Z2, F1) ->
    dg_read_field_def_ServiceOptions(Other, Z1, Z2, F1).

dg_read_field_def_ServiceOptions(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ServiceOptions(Rest, N + 7,
				     X bsl N + Acc, F1);
dg_read_field_def_ServiceOptions(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      7994 ->
	  d_field_ServiceOptions_uninterpreted_option(Rest, 0, 0,
						      F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ServiceOptions(Rest, 0, 0, F1);
	    1 -> skip_64_ServiceOptions(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_ServiceOptions(Rest, 0, 0, F1);
	    5 -> skip_32_ServiceOptions(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ServiceOptions(<<>>, 0, 0, F1) ->
    #'ServiceOptions'{uninterpreted_option =
			  lists:reverse(F1)}.

d_field_ServiceOptions_uninterpreted_option(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    d_field_ServiceOptions_uninterpreted_option(Rest, N + 7,
						X bsl N + Acc, F1);
d_field_ServiceOptions_uninterpreted_option(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_ServiceOptions(Rest2, 0, 0,
				      [NewFValue | F1]).


skip_varint_ServiceOptions(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    skip_varint_ServiceOptions(Rest, Z1, Z2, F1);
skip_varint_ServiceOptions(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    dfp_read_field_def_ServiceOptions(Rest, Z1, Z2, F1).


skip_length_delimited_ServiceOptions(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ServiceOptions(Rest, N + 7,
					 X bsl N + Acc, F1);
skip_length_delimited_ServiceOptions(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServiceOptions(Rest2, 0, 0, F1).


skip_32_ServiceOptions(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_ServiceOptions(Rest, Z1, Z2, F1).


skip_64_ServiceOptions(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_ServiceOptions(Rest, Z1, Z2, F1).


d_msg_MethodDescriptorProto(Bin) ->
    dfp_read_field_def_MethodDescriptorProto(Bin, 0, 0,
					     undefined, undefined, undefined,
					     undefined).

dfp_read_field_def_MethodDescriptorProto(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_MethodDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				       F3, F4);
dfp_read_field_def_MethodDescriptorProto(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_MethodDescriptorProto_input_type(Rest, Z1, Z2,
					     F1, F2, F3, F4);
dfp_read_field_def_MethodDescriptorProto(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_MethodDescriptorProto_output_type(Rest, Z1, Z2,
					      F1, F2, F3, F4);
dfp_read_field_def_MethodDescriptorProto(<<34,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4) ->
    d_field_MethodDescriptorProto_options(Rest, Z1, Z2, F1,
					  F2, F3, F4);
dfp_read_field_def_MethodDescriptorProto(<<>>, 0, 0, F1,
					 F2, F3, F4) ->
    #'MethodDescriptorProto'{name = F1, input_type = F2,
			     output_type = F3, options = F4};
dfp_read_field_def_MethodDescriptorProto(Other, Z1, Z2,
					 F1, F2, F3, F4) ->
    dg_read_field_def_MethodDescriptorProto(Other, Z1, Z2,
					    F1, F2, F3, F4).

dg_read_field_def_MethodDescriptorProto(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_MethodDescriptorProto(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_MethodDescriptorProto(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MethodDescriptorProto_name(Rest, 0, 0, F1, F2,
					     F3, F4);
      18 ->
	  d_field_MethodDescriptorProto_input_type(Rest, 0, 0, F1,
						   F2, F3, F4);
      26 ->
	  d_field_MethodDescriptorProto_output_type(Rest, 0, 0,
						    F1, F2, F3, F4);
      34 ->
	  d_field_MethodDescriptorProto_options(Rest, 0, 0, F1,
						F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MethodDescriptorProto(Rest, 0, 0, F1, F2,
						  F3, F4);
	    1 ->
		skip_64_MethodDescriptorProto(Rest, 0, 0, F1, F2, F3,
					      F4);
	    2 ->
		skip_length_delimited_MethodDescriptorProto(Rest, 0, 0,
							    F1, F2, F3, F4);
	    5 ->
		skip_32_MethodDescriptorProto(Rest, 0, 0, F1, F2, F3,
					      F4)
	  end
    end;
dg_read_field_def_MethodDescriptorProto(<<>>, 0, 0, F1,
					F2, F3, F4) ->
    #'MethodDescriptorProto'{name = F1, input_type = F2,
			     output_type = F3, options = F4}.

d_field_MethodDescriptorProto_name(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_MethodDescriptorProto_name(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4);
d_field_MethodDescriptorProto_name(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     NewFValue, F2, F3, F4).


d_field_MethodDescriptorProto_input_type(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_MethodDescriptorProto_input_type(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4);
d_field_MethodDescriptorProto_input_type(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, NewFValue, F3, F4).


d_field_MethodDescriptorProto_output_type(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_MethodDescriptorProto_output_type(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4);
d_field_MethodDescriptorProto_output_type(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, _, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, F2, NewFValue, F4).


d_field_MethodDescriptorProto_options(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_MethodDescriptorProto_options(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4);
d_field_MethodDescriptorProto_options(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'MethodOptions'),
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, F2, F3,
					     if F4 == undefined -> NewFValue;
						true ->
						    merge_msg_MethodOptions(F4,
									    NewFValue)
					     end).


skip_varint_MethodDescriptorProto(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_MethodDescriptorProto(Rest, Z1, Z2, F1, F2,
				      F3, F4);
skip_varint_MethodDescriptorProto(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_MethodDescriptorProto(Rest, Z1, Z2,
					     F1, F2, F3, F4).


skip_length_delimited_MethodDescriptorProto(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_MethodDescriptorProto(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_MethodDescriptorProto(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MethodDescriptorProto(Rest2, 0, 0,
					     F1, F2, F3, F4).


skip_32_MethodDescriptorProto(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_MethodDescriptorProto(Rest, Z1, Z2,
					     F1, F2, F3, F4).


skip_64_MethodDescriptorProto(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_MethodDescriptorProto(Rest, Z1, Z2,
					     F1, F2, F3, F4).


d_msg_ServiceDescriptorProto(Bin) ->
    dfp_read_field_def_ServiceDescriptorProto(Bin, 0, 0,
					      undefined, [], undefined).

dfp_read_field_def_ServiceDescriptorProto(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    d_field_ServiceDescriptorProto_name(Rest, Z1, Z2, F1,
					F2, F3);
dfp_read_field_def_ServiceDescriptorProto(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    d_field_ServiceDescriptorProto_method(Rest, Z1, Z2, F1,
					  F2, F3);
dfp_read_field_def_ServiceDescriptorProto(<<26,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3) ->
    d_field_ServiceDescriptorProto_options(Rest, Z1, Z2, F1,
					   F2, F3);
dfp_read_field_def_ServiceDescriptorProto(<<>>, 0, 0,
					  F1, F2, F3) ->
    #'ServiceDescriptorProto'{name = F1,
			      method = lists:reverse(F2), options = F3};
dfp_read_field_def_ServiceDescriptorProto(Other, Z1, Z2,
					  F1, F2, F3) ->
    dg_read_field_def_ServiceDescriptorProto(Other, Z1, Z2,
					     F1, F2, F3).

dg_read_field_def_ServiceDescriptorProto(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_ServiceDescriptorProto(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
dg_read_field_def_ServiceDescriptorProto(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServiceDescriptorProto_name(Rest, 0, 0, F1, F2,
					      F3);
      18 ->
	  d_field_ServiceDescriptorProto_method(Rest, 0, 0, F1,
						F2, F3);
      26 ->
	  d_field_ServiceDescriptorProto_options(Rest, 0, 0, F1,
						 F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServiceDescriptorProto(Rest, 0, 0, F1, F2,
						   F3);
	    1 ->
		skip_64_ServiceDescriptorProto(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_ServiceDescriptorProto(Rest, 0, 0,
							     F1, F2, F3);
	    5 ->
		skip_32_ServiceDescriptorProto(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_ServiceDescriptorProto(<<>>, 0, 0, F1,
					 F2, F3) ->
    #'ServiceDescriptorProto'{name = F1,
			      method = lists:reverse(F2), options = F3}.

d_field_ServiceDescriptorProto_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ServiceDescriptorProto_name(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
d_field_ServiceDescriptorProto_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      NewFValue, F2, F3).


d_field_ServiceDescriptorProto_method(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ServiceDescriptorProto_method(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
d_field_ServiceDescriptorProto_method(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'MethodDescriptorProto'),
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      F1, [NewFValue | F2], F3).


d_field_ServiceDescriptorProto_options(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ServiceDescriptorProto_options(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3);
d_field_ServiceDescriptorProto_options(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ServiceOptions'),
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      F1, F2,
					      if F3 == undefined -> NewFValue;
						 true ->
						     merge_msg_ServiceOptions(F3,
									      NewFValue)
					      end).


skip_varint_ServiceDescriptorProto(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    skip_varint_ServiceDescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3);
skip_varint_ServiceDescriptorProto(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_ServiceDescriptorProto(Rest, Z1, Z2,
					      F1, F2, F3).


skip_length_delimited_ServiceDescriptorProto(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_ServiceDescriptorProto(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3);
skip_length_delimited_ServiceDescriptorProto(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServiceDescriptorProto(Rest2, 0, 0,
					      F1, F2, F3).


skip_32_ServiceDescriptorProto(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_ServiceDescriptorProto(Rest, Z1, Z2,
					      F1, F2, F3).


skip_64_ServiceDescriptorProto(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_ServiceDescriptorProto(Rest, Z1, Z2,
					      F1, F2, F3).


d_msg_MessageOptions(Bin) ->
    dfp_read_field_def_MessageOptions(Bin, 0, 0, undefined,
				      undefined, []).

dfp_read_field_def_MessageOptions(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    d_field_MessageOptions_message_set_wire_format(Rest, Z1,
						   Z2, F1, F2, F3);
dfp_read_field_def_MessageOptions(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    d_field_MessageOptions_no_standard_descriptor_accessor(Rest,
							   Z1, Z2, F1, F2, F3);
dfp_read_field_def_MessageOptions(<<186, 62,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3) ->
    d_field_MessageOptions_uninterpreted_option(Rest, Z1,
						Z2, F1, F2, F3);
dfp_read_field_def_MessageOptions(<<>>, 0, 0, F1, F2,
				  F3) ->
    #'MessageOptions'{message_set_wire_format = F1,
		      no_standard_descriptor_accessor = F2,
		      uninterpreted_option = lists:reverse(F3)};
dfp_read_field_def_MessageOptions(Other, Z1, Z2, F1, F2,
				  F3) ->
    dg_read_field_def_MessageOptions(Other, Z1, Z2, F1, F2,
				     F3).

dg_read_field_def_MessageOptions(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_MessageOptions(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
dg_read_field_def_MessageOptions(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MessageOptions_message_set_wire_format(Rest, 0,
							 0, F1, F2, F3);
      16 ->
	  d_field_MessageOptions_no_standard_descriptor_accessor(Rest,
								 0, 0, F1, F2,
								 F3);
      7994 ->
	  d_field_MessageOptions_uninterpreted_option(Rest, 0, 0,
						      F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_MessageOptions(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_MessageOptions(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_MessageOptions(Rest, 0, 0, F1, F2,
						     F3);
	    5 -> skip_32_MessageOptions(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_MessageOptions(<<>>, 0, 0, F1, F2,
				 F3) ->
    #'MessageOptions'{message_set_wire_format = F1,
		      no_standard_descriptor_accessor = F2,
		      uninterpreted_option = lists:reverse(F3)}.

d_field_MessageOptions_message_set_wire_format(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MessageOptions_message_set_wire_format(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3);
d_field_MessageOptions_message_set_wire_format(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MessageOptions(Rest, 0, 0, NewFValue,
				      F2, F3).


d_field_MessageOptions_no_standard_descriptor_accessor(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MessageOptions_no_standard_descriptor_accessor(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3);
d_field_MessageOptions_no_standard_descriptor_accessor(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, _, F3) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_MessageOptions(Rest, 0, 0, F1,
				      NewFValue, F3).


d_field_MessageOptions_uninterpreted_option(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MessageOptions_uninterpreted_option(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3);
d_field_MessageOptions_uninterpreted_option(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_MessageOptions(Rest2, 0, 0, F1, F2,
				      [NewFValue | F3]).


skip_varint_MessageOptions(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3) ->
    skip_varint_MessageOptions(Rest, Z1, Z2, F1, F2, F3);
skip_varint_MessageOptions(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_MessageOptions(Rest, Z1, Z2, F1, F2,
				      F3).


skip_length_delimited_MessageOptions(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_MessageOptions(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
skip_length_delimited_MessageOptions(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MessageOptions(Rest2, 0, 0, F1, F2,
				      F3).


skip_32_MessageOptions(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3) ->
    dfp_read_field_def_MessageOptions(Rest, Z1, Z2, F1, F2,
				      F3).


skip_64_MessageOptions(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3) ->
    dfp_read_field_def_MessageOptions(Rest, Z1, Z2, F1, F2,
				      F3).


d_msg_EnumValueDescriptorProto(Bin) ->
    dfp_read_field_def_EnumValueDescriptorProto(Bin, 0, 0,
						undefined, undefined,
						undefined).

dfp_read_field_def_EnumValueDescriptorProto(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3) ->
    d_field_EnumValueDescriptorProto_name(Rest, Z1, Z2, F1,
					  F2, F3);
dfp_read_field_def_EnumValueDescriptorProto(<<16,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3) ->
    d_field_EnumValueDescriptorProto_number(Rest, Z1, Z2,
					    F1, F2, F3);
dfp_read_field_def_EnumValueDescriptorProto(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3) ->
    d_field_EnumValueDescriptorProto_options(Rest, Z1, Z2,
					     F1, F2, F3);
dfp_read_field_def_EnumValueDescriptorProto(<<>>, 0, 0,
					    F1, F2, F3) ->
    #'EnumValueDescriptorProto'{name = F1, number = F2,
				options = F3};
dfp_read_field_def_EnumValueDescriptorProto(Other, Z1,
					    Z2, F1, F2, F3) ->
    dg_read_field_def_EnumValueDescriptorProto(Other, Z1,
					       Z2, F1, F2, F3).

dg_read_field_def_EnumValueDescriptorProto(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_EnumValueDescriptorProto(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3);
dg_read_field_def_EnumValueDescriptorProto(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnumValueDescriptorProto_name(Rest, 0, 0, F1,
						F2, F3);
      16 ->
	  d_field_EnumValueDescriptorProto_number(Rest, 0, 0, F1,
						  F2, F3);
      26 ->
	  d_field_EnumValueDescriptorProto_options(Rest, 0, 0, F1,
						   F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnumValueDescriptorProto(Rest, 0, 0, F1, F2,
						     F3);
	    1 ->
		skip_64_EnumValueDescriptorProto(Rest, 0, 0, F1, F2,
						 F3);
	    2 ->
		skip_length_delimited_EnumValueDescriptorProto(Rest, 0,
							       0, F1, F2, F3);
	    5 ->
		skip_32_EnumValueDescriptorProto(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_EnumValueDescriptorProto(<<>>, 0, 0,
					   F1, F2, F3) ->
    #'EnumValueDescriptorProto'{name = F1, number = F2,
				options = F3}.

d_field_EnumValueDescriptorProto_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_EnumValueDescriptorProto_name(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
d_field_EnumValueDescriptorProto_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnumValueDescriptorProto(Rest2, 0, 0,
						NewFValue, F2, F3).


d_field_EnumValueDescriptorProto_number(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_EnumValueDescriptorProto_number(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
d_field_EnumValueDescriptorProto_number(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, _, F3) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_EnumValueDescriptorProto(Rest, 0, 0,
						F1, NewFValue, F3).


d_field_EnumValueDescriptorProto_options(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_EnumValueDescriptorProto_options(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
d_field_EnumValueDescriptorProto_options(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'EnumValueOptions'),
    dfp_read_field_def_EnumValueDescriptorProto(Rest2, 0, 0,
						F1, F2,
						if F3 == undefined -> NewFValue;
						   true ->
						       merge_msg_EnumValueOptions(F3,
										  NewFValue)
						end).


skip_varint_EnumValueDescriptorProto(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    skip_varint_EnumValueDescriptorProto(Rest, Z1, Z2, F1,
					 F2, F3);
skip_varint_EnumValueDescriptorProto(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_EnumValueDescriptorProto(Rest, Z1,
						Z2, F1, F2, F3).


skip_length_delimited_EnumValueDescriptorProto(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_EnumValueDescriptorProto(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3);
skip_length_delimited_EnumValueDescriptorProto(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumValueDescriptorProto(Rest2, 0, 0,
						F1, F2, F3).


skip_32_EnumValueDescriptorProto(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_EnumValueDescriptorProto(Rest, Z1,
						Z2, F1, F2, F3).


skip_64_EnumValueDescriptorProto(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_EnumValueDescriptorProto(Rest, Z1,
						Z2, F1, F2, F3).


d_msg_EnumDescriptorProto(Bin) ->
    dfp_read_field_def_EnumDescriptorProto(Bin, 0, 0,
					   undefined, [], undefined).

dfp_read_field_def_EnumDescriptorProto(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    d_field_EnumDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				     F3);
dfp_read_field_def_EnumDescriptorProto(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    d_field_EnumDescriptorProto_value(Rest, Z1, Z2, F1, F2,
				      F3);
dfp_read_field_def_EnumDescriptorProto(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    d_field_EnumDescriptorProto_options(Rest, Z1, Z2, F1,
					F2, F3);
dfp_read_field_def_EnumDescriptorProto(<<>>, 0, 0, F1,
				       F2, F3) ->
    #'EnumDescriptorProto'{name = F1,
			   value = lists:reverse(F2), options = F3};
dfp_read_field_def_EnumDescriptorProto(Other, Z1, Z2,
				       F1, F2, F3) ->
    dg_read_field_def_EnumDescriptorProto(Other, Z1, Z2, F1,
					  F2, F3).

dg_read_field_def_EnumDescriptorProto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_EnumDescriptorProto(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_EnumDescriptorProto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnumDescriptorProto_name(Rest, 0, 0, F1, F2,
					   F3);
      18 ->
	  d_field_EnumDescriptorProto_value(Rest, 0, 0, F1, F2,
					    F3);
      26 ->
	  d_field_EnumDescriptorProto_options(Rest, 0, 0, F1, F2,
					      F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnumDescriptorProto(Rest, 0, 0, F1, F2, F3);
	    1 ->
		skip_64_EnumDescriptorProto(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_EnumDescriptorProto(Rest, 0, 0,
							  F1, F2, F3);
	    5 -> skip_32_EnumDescriptorProto(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_EnumDescriptorProto(<<>>, 0, 0, F1,
				      F2, F3) ->
    #'EnumDescriptorProto'{name = F1,
			   value = lists:reverse(F2), options = F3}.

d_field_EnumDescriptorProto_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_EnumDescriptorProto_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
d_field_EnumDescriptorProto_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0,
					   NewFValue, F2, F3).


d_field_EnumDescriptorProto_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_EnumDescriptorProto_value(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
d_field_EnumDescriptorProto_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'EnumValueDescriptorProto'),
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0, F1,
					   [NewFValue | F2], F3).


d_field_EnumDescriptorProto_options(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_EnumDescriptorProto_options(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
d_field_EnumDescriptorProto_options(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'EnumOptions'),
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0, F1,
					   F2,
					   if F3 == undefined -> NewFValue;
					      true ->
						  merge_msg_EnumOptions(F3,
									NewFValue)
					   end).


skip_varint_EnumDescriptorProto(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3) ->
    skip_varint_EnumDescriptorProto(Rest, Z1, Z2, F1, F2,
				    F3);
skip_varint_EnumDescriptorProto(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_EnumDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3).


skip_length_delimited_EnumDescriptorProto(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_EnumDescriptorProto(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_EnumDescriptorProto(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnumDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3).


skip_32_EnumDescriptorProto(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3) ->
    dfp_read_field_def_EnumDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3).


skip_64_EnumDescriptorProto(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3) ->
    dfp_read_field_def_EnumDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3).


d_msg_FieldOptions(Bin) ->
    dfp_read_field_def_FieldOptions(Bin, 0, 0, undefined,
				    undefined, undefined, undefined, []).

dfp_read_field_def_FieldOptions(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_FieldOptions_ctype(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_FieldOptions(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_FieldOptions_packed(Rest, Z1, Z2, F1, F2, F3,
				F4, F5);
dfp_read_field_def_FieldOptions(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_FieldOptions_deprecated(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
dfp_read_field_def_FieldOptions(<<74, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5) ->
    d_field_FieldOptions_experimental_map_key(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5);
dfp_read_field_def_FieldOptions(<<186, 62,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5) ->
    d_field_FieldOptions_uninterpreted_option(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5);
dfp_read_field_def_FieldOptions(<<>>, 0, 0, F1, F2, F3,
				F4, F5) ->
    #'FieldOptions'{ctype = F1, packed = F2,
		    deprecated = F3, experimental_map_key = F4,
		    uninterpreted_option = lists:reverse(F5)};
dfp_read_field_def_FieldOptions(Other, Z1, Z2, F1, F2,
				F3, F4, F5) ->
    dg_read_field_def_FieldOptions(Other, Z1, Z2, F1, F2,
				   F3, F4, F5).

dg_read_field_def_FieldOptions(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_FieldOptions(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5);
dg_read_field_def_FieldOptions(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_FieldOptions_ctype(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      16 ->
	  d_field_FieldOptions_packed(Rest, 0, 0, F1, F2, F3, F4,
				      F5);
      24 ->
	  d_field_FieldOptions_deprecated(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      74 ->
	  d_field_FieldOptions_experimental_map_key(Rest, 0, 0,
						    F1, F2, F3, F4, F5);
      7994 ->
	  d_field_FieldOptions_uninterpreted_option(Rest, 0, 0,
						    F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FieldOptions(Rest, 0, 0, F1, F2, F3, F4,
					 F5);
	    1 ->
		skip_64_FieldOptions(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_FieldOptions(Rest, 0, 0, F1, F2,
						   F3, F4, F5);
	    5 ->
		skip_32_FieldOptions(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_FieldOptions(<<>>, 0, 0, F1, F2, F3,
			       F4, F5) ->
    #'FieldOptions'{ctype = F1, packed = F2,
		    deprecated = F3, experimental_map_key = F4,
		    uninterpreted_option = lists:reverse(F5)}.

d_field_FieldOptions_ctype(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_FieldOptions_ctype(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_FieldOptions_ctype(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldOptions.CType'(Tmp),
    dfp_read_field_def_FieldOptions(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5).


d_field_FieldOptions_packed(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_FieldOptions_packed(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
d_field_FieldOptions_packed(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5).


d_field_FieldOptions_deprecated(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_FieldOptions_deprecated(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_FieldOptions_deprecated(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FieldOptions(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5).


d_field_FieldOptions_experimental_map_key(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_FieldOptions_experimental_map_key(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4,
					      F5);
d_field_FieldOptions_experimental_map_key(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, _, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldOptions(Rest2, 0, 0, F1, F2, F3,
				    NewFValue, F5).


d_field_FieldOptions_uninterpreted_option(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_FieldOptions_uninterpreted_option(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4,
					      F5);
d_field_FieldOptions_uninterpreted_option(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'UninterpretedOption'),
    dfp_read_field_def_FieldOptions(Rest2, 0, 0, F1, F2, F3,
				    F4, [NewFValue | F5]).


skip_varint_FieldOptions(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5) ->
    skip_varint_FieldOptions(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
skip_varint_FieldOptions(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5) ->
    dfp_read_field_def_FieldOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


skip_length_delimited_FieldOptions(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_FieldOptions(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_FieldOptions(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FieldOptions(Rest2, 0, 0, F1, F2, F3,
				    F4, F5).


skip_32_FieldOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5) ->
    dfp_read_field_def_FieldOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


skip_64_FieldOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5) ->
    dfp_read_field_def_FieldOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5).


d_msg_FieldDescriptorProto(Bin) ->
    dfp_read_field_def_FieldDescriptorProto(Bin, 0, 0,
					    undefined, undefined, undefined,
					    undefined, undefined, undefined,
					    undefined, undefined).

dfp_read_field_def_FieldDescriptorProto(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<24,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_number(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<32,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_label(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<40,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_type(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<50,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_type_name(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<18,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_extendee(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<58,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_default_value(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<66,
					  Rest/binary>>,
					Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					F8) ->
    d_field_FieldDescriptorProto_options(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8);
dfp_read_field_def_FieldDescriptorProto(<<>>, 0, 0, F1,
					F2, F3, F4, F5, F6, F7, F8) ->
    #'FieldDescriptorProto'{name = F1, number = F2,
			    label = F3, type = F4, type_name = F5,
			    extendee = F6, default_value = F7, options = F8};
dfp_read_field_def_FieldDescriptorProto(Other, Z1, Z2,
					F1, F2, F3, F4, F5, F6, F7, F8) ->
    dg_read_field_def_FieldDescriptorProto(Other, Z1, Z2,
					   F1, F2, F3, F4, F5, F6, F7, F8).

dg_read_field_def_FieldDescriptorProto(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 32 - 7 ->
    dg_read_field_def_FieldDescriptorProto(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8);
dg_read_field_def_FieldDescriptorProto(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7,
				       F8) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FieldDescriptorProto_name(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      24 ->
	  d_field_FieldDescriptorProto_number(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8);
      32 ->
	  d_field_FieldDescriptorProto_label(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      40 ->
	  d_field_FieldDescriptorProto_type(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      50 ->
	  d_field_FieldDescriptorProto_type_name(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8);
      18 ->
	  d_field_FieldDescriptorProto_extendee(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8);
      58 ->
	  d_field_FieldDescriptorProto_default_value(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8);
      66 ->
	  d_field_FieldDescriptorProto_options(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FieldDescriptorProto(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8);
	    1 ->
		skip_64_FieldDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8);
	    2 ->
		skip_length_delimited_FieldDescriptorProto(Rest, 0, 0,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8);
	    5 ->
		skip_32_FieldDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8)
	  end
    end;
dg_read_field_def_FieldDescriptorProto(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8) ->
    #'FieldDescriptorProto'{name = F1, number = F2,
			    label = F3, type = F4, type_name = F5,
			    extendee = F6, default_value = F7, options = F8}.

d_field_FieldDescriptorProto_name(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_name(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
d_field_FieldDescriptorProto_name(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0,
					    NewFValue, F2, F3, F4, F5, F6, F7,
					    F8).


d_field_FieldDescriptorProto_number(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_number(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8);
d_field_FieldDescriptorProto_number(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, F6, F7, F8) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    NewFValue, F3, F4, F5, F6, F7, F8).


d_field_FieldDescriptorProto_label(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_label(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
d_field_FieldDescriptorProto_label(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, F6, F7, F8) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldDescriptorProto.Label'(Tmp),
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    F2, NewFValue, F4, F5, F6, F7, F8).


d_field_FieldDescriptorProto_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_type(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
d_field_FieldDescriptorProto_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, F5, F6, F7, F8) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FieldDescriptorProto.Type'(Tmp),
    dfp_read_field_def_FieldDescriptorProto(Rest, 0, 0, F1,
					    F2, F3, NewFValue, F5, F6, F7, F8).


d_field_FieldDescriptorProto_type_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_type_name(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8);
d_field_FieldDescriptorProto_type_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, _, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, NewFValue, F6, F7, F8).


d_field_FieldDescriptorProto_extendee(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_extendee(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8);
d_field_FieldDescriptorProto_extendee(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, _, F7, F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, NewFValue, F7, F8).


d_field_FieldDescriptorProto_default_value(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_default_value(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8);
d_field_FieldDescriptorProto_default_value(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, _,
					   F8) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, NewFValue, F8).


d_field_FieldDescriptorProto_options(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_FieldDescriptorProto_options(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8);
d_field_FieldDescriptorProto_options(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FieldOptions'),
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, F7,
					    if F8 == undefined -> NewFValue;
					       true ->
						   merge_msg_FieldOptions(F8,
									  NewFValue)
					    end).


skip_varint_FieldDescriptorProto(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    skip_varint_FieldDescriptorProto(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8);
skip_varint_FieldDescriptorProto(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_FieldDescriptorProto(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8).


skip_length_delimited_FieldDescriptorProto(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8)
    when N < 57 ->
    skip_length_delimited_FieldDescriptorProto(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8);
skip_length_delimited_FieldDescriptorProto(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FieldDescriptorProto(Rest2, 0, 0, F1,
					    F2, F3, F4, F5, F6, F7, F8).


skip_32_FieldDescriptorProto(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_FieldDescriptorProto(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8).


skip_64_FieldDescriptorProto(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_FieldDescriptorProto(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8).


d_msg_DescriptorProto(Bin) ->
    dfp_read_field_def_DescriptorProto(Bin, 0, 0, undefined,
				       [], [], [], [], [], undefined).

dfp_read_field_def_DescriptorProto(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_name(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_field(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<50, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_extension(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_nested_type(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_enum_type(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<42, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_extension_range(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<58, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DescriptorProto_options(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7);
dfp_read_field_def_DescriptorProto(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7) ->
    #'DescriptorProto'{name = F1, field = lists:reverse(F2),
		       extension = lists:reverse(F3),
		       nested_type = lists:reverse(F4),
		       enum_type = lists:reverse(F5),
		       extension_range = lists:reverse(F6), options = F7};
dfp_read_field_def_DescriptorProto(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6, F7) ->
    dg_read_field_def_DescriptorProto(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7).

dg_read_field_def_DescriptorProto(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_DescriptorProto(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
dg_read_field_def_DescriptorProto(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DescriptorProto_name(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7);
      18 ->
	  d_field_DescriptorProto_field(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7);
      50 ->
	  d_field_DescriptorProto_extension(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7);
      26 ->
	  d_field_DescriptorProto_nested_type(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7);
      34 ->
	  d_field_DescriptorProto_enum_type(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7);
      42 ->
	  d_field_DescriptorProto_extension_range(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7);
      58 ->
	  d_field_DescriptorProto_options(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7);
	    1 ->
		skip_64_DescriptorProto(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7);
	    2 ->
		skip_length_delimited_DescriptorProto(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7);
	    5 ->
		skip_32_DescriptorProto(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7)
	  end
    end;
dg_read_field_def_DescriptorProto(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7) ->
    #'DescriptorProto'{name = F1, field = lists:reverse(F2),
		       extension = lists:reverse(F3),
		       nested_type = lists:reverse(F4),
		       enum_type = lists:reverse(F5),
		       extension_range = lists:reverse(F6), options = F7}.

d_field_DescriptorProto_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_name(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7);
d_field_DescriptorProto_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6, F7).


d_field_DescriptorProto_field(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_field(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_DescriptorProto_field(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FieldDescriptorProto'),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1,
				       [NewFValue | F2], F3, F4, F5, F6, F7).


d_field_DescriptorProto_extension(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_extension(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
d_field_DescriptorProto_extension(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FieldDescriptorProto'),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       [NewFValue | F3], F4, F5, F6, F7).


d_field_DescriptorProto_nested_type(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_nested_type(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
d_field_DescriptorProto_nested_type(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'DescriptorProto'),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, [NewFValue | F4], F5, F6, F7).


d_field_DescriptorProto_enum_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_enum_type(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
d_field_DescriptorProto_enum_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'EnumDescriptorProto'),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, [NewFValue | F5], F6, F7).


d_field_DescriptorProto_extension_range(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_extension_range(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7);
d_field_DescriptorProto_extension_range(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs,
			   'DescriptorProto.ExtensionRange'),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, [NewFValue | F6], F7).


d_field_DescriptorProto_options(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DescriptorProto_options(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_DescriptorProto_options(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'MessageOptions'),
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6,
				       if F7 == undefined -> NewFValue;
					  true ->
					      merge_msg_MessageOptions(F7,
								       NewFValue)
				       end).


skip_varint_DescriptorProto(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_DescriptorProto(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
skip_varint_DescriptorProto(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_DescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7).


skip_length_delimited_DescriptorProto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_DescriptorProto(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7);
skip_length_delimited_DescriptorProto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DescriptorProto(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7).


skip_32_DescriptorProto(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_DescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7).


skip_64_DescriptorProto(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_DescriptorProto(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7).


'd_msg_SourceCodeInfo.Location'(Bin) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Bin, 0, 0,
						 [], []).

'dfp_read_field_def_SourceCodeInfo.Location'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'd_field_SourceCodeInfo.Location_path'(Rest, Z1, Z2, F1,
					   F2);
'dfp_read_field_def_SourceCodeInfo.Location'(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2) ->
    'd_field_SourceCodeInfo.Location_span'(Rest, Z1, Z2, F1,
					   F2);
'dfp_read_field_def_SourceCodeInfo.Location'(<<>>, 0, 0,
					     F1, F2) ->
    #'SourceCodeInfo.Location'{path = lists:reverse(F1),
			       span = lists:reverse(F2)};
'dfp_read_field_def_SourceCodeInfo.Location'(Other, Z1,
					     Z2, F1, F2) ->
    'dg_read_field_def_SourceCodeInfo.Location'(Other, Z1,
						Z2, F1, F2).

'dg_read_field_def_SourceCodeInfo.Location'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_SourceCodeInfo.Location'(Rest, N + 7,
						X bsl N + Acc, F1, F2);
'dg_read_field_def_SourceCodeInfo.Location'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_SourceCodeInfo.Location_path'(Rest, 0, 0, F1,
						 F2);
      18 ->
	  'd_field_SourceCodeInfo.Location_span'(Rest, 0, 0, F1,
						 F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_SourceCodeInfo.Location'(Rest, 0, 0, F1,
						      F2);
	    1 ->
		'skip_64_SourceCodeInfo.Location'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_SourceCodeInfo.Location'(Rest, 0,
								0, F1, F2);
	    5 ->
		'skip_32_SourceCodeInfo.Location'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_SourceCodeInfo.Location'(<<>>, 0, 0,
					    F1, F2) ->
    #'SourceCodeInfo.Location'{path = lists:reverse(F1),
			       span = lists:reverse(F2)}.

'd_field_SourceCodeInfo.Location_path'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_path'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'd_field_SourceCodeInfo.Location_path'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_SourceCodeInfo.Location_path'(PackedBytes,
						      0, 0, F1),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, NewSeq, F2).


'd_packed_field_SourceCodeInfo.Location_path'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq)
    when N < 57 ->
    'd_packed_field_SourceCodeInfo.Location_path'(Rest,
						  N + 7, X bsl N + Acc, AccSeq);
'd_packed_field_SourceCodeInfo.Location_path'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'd_packed_field_SourceCodeInfo.Location_path'(Rest, 0,
						  0, [NewFValue | AccSeq]);
'd_packed_field_SourceCodeInfo.Location_path'(<<>>, 0,
					      0, AccSeq) ->
    AccSeq.


'd_field_SourceCodeInfo.Location_span'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2)
    when N < 57 ->
    'd_field_SourceCodeInfo.Location_span'(Rest, N + 7,
					   X bsl N + Acc, F1, F2);
'd_field_SourceCodeInfo.Location_span'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_SourceCodeInfo.Location_span'(PackedBytes,
						      0, 0, F2),
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, NewSeq).


'd_packed_field_SourceCodeInfo.Location_span'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq)
    when N < 57 ->
    'd_packed_field_SourceCodeInfo.Location_span'(Rest,
						  N + 7, X bsl N + Acc, AccSeq);
'd_packed_field_SourceCodeInfo.Location_span'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    'd_packed_field_SourceCodeInfo.Location_span'(Rest, 0,
						  0, [NewFValue | AccSeq]);
'd_packed_field_SourceCodeInfo.Location_span'(<<>>, 0,
					      0, AccSeq) ->
    AccSeq.


'skip_varint_SourceCodeInfo.Location'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    'skip_varint_SourceCodeInfo.Location'(Rest, Z1, Z2, F1,
					  F2);
'skip_varint_SourceCodeInfo.Location'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest, Z1,
						 Z2, F1, F2).


'skip_length_delimited_SourceCodeInfo.Location'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_SourceCodeInfo.Location'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2);
'skip_length_delimited_SourceCodeInfo.Location'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest2, 0,
						 0, F1, F2).


'skip_32_SourceCodeInfo.Location'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest, Z1,
						 Z2, F1, F2).


'skip_64_SourceCodeInfo.Location'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'dfp_read_field_def_SourceCodeInfo.Location'(Rest, Z1,
						 Z2, F1, F2).


d_msg_SourceCodeInfo(Bin) ->
    dfp_read_field_def_SourceCodeInfo(Bin, 0, 0, []).

dfp_read_field_def_SourceCodeInfo(<<10, Rest/binary>>,
				  Z1, Z2, F1) ->
    d_field_SourceCodeInfo_location(Rest, Z1, Z2, F1);
dfp_read_field_def_SourceCodeInfo(<<>>, 0, 0, F1) ->
    #'SourceCodeInfo'{location = lists:reverse(F1)};
dfp_read_field_def_SourceCodeInfo(Other, Z1, Z2, F1) ->
    dg_read_field_def_SourceCodeInfo(Other, Z1, Z2, F1).

dg_read_field_def_SourceCodeInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_SourceCodeInfo(Rest, N + 7,
				     X bsl N + Acc, F1);
dg_read_field_def_SourceCodeInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_SourceCodeInfo_location(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_SourceCodeInfo(Rest, 0, 0, F1);
	    1 -> skip_64_SourceCodeInfo(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_SourceCodeInfo(Rest, 0, 0, F1);
	    5 -> skip_32_SourceCodeInfo(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_SourceCodeInfo(<<>>, 0, 0, F1) ->
    #'SourceCodeInfo'{location = lists:reverse(F1)}.

d_field_SourceCodeInfo_location(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1)
    when N < 57 ->
    d_field_SourceCodeInfo_location(Rest, N + 7,
				    X bsl N + Acc, F1);
d_field_SourceCodeInfo_location(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SourceCodeInfo.Location'),
    dfp_read_field_def_SourceCodeInfo(Rest2, 0, 0,
				      [NewFValue | F1]).


skip_varint_SourceCodeInfo(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    skip_varint_SourceCodeInfo(Rest, Z1, Z2, F1);
skip_varint_SourceCodeInfo(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    dfp_read_field_def_SourceCodeInfo(Rest, Z1, Z2, F1).


skip_length_delimited_SourceCodeInfo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_SourceCodeInfo(Rest, N + 7,
					 X bsl N + Acc, F1);
skip_length_delimited_SourceCodeInfo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SourceCodeInfo(Rest2, 0, 0, F1).


skip_32_SourceCodeInfo(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_SourceCodeInfo(Rest, Z1, Z2, F1).


skip_64_SourceCodeInfo(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    dfp_read_field_def_SourceCodeInfo(Rest, Z1, Z2, F1).


d_msg_FileDescriptorProto(Bin) ->
    dfp_read_field_def_FileDescriptorProto(Bin, 0, 0,
					   undefined, undefined, [], [], [], [],
					   [], undefined, undefined).

dfp_read_field_def_FileDescriptorProto(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_name(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_package(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_dependency(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_message_type(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8,
					     F9);
dfp_read_field_def_FileDescriptorProto(<<42,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_enum_type(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<50,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_service(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<58,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_extension(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<66,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_options(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9);
dfp_read_field_def_FileDescriptorProto(<<74,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    d_field_FileDescriptorProto_source_code_info(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9);
dfp_read_field_def_FileDescriptorProto(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, F6, F7, F8, F9) ->
    #'FileDescriptorProto'{name = F1, package = F2,
			   dependency = lists:reverse(F3),
			   message_type = lists:reverse(F4),
			   enum_type = lists:reverse(F5),
			   service = lists:reverse(F6),
			   extension = lists:reverse(F7), options = F8,
			   source_code_info = F9};
dfp_read_field_def_FileDescriptorProto(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    dg_read_field_def_FileDescriptorProto(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9).

dg_read_field_def_FileDescriptorProto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9)
    when N < 32 - 7 ->
    dg_read_field_def_FileDescriptorProto(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9);
dg_read_field_def_FileDescriptorProto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FileDescriptorProto_name(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9);
      18 ->
	  d_field_FileDescriptorProto_package(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9);
      26 ->
	  d_field_FileDescriptorProto_dependency(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8,
						 F9);
      34 ->
	  d_field_FileDescriptorProto_message_type(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9);
      42 ->
	  d_field_FileDescriptorProto_enum_type(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9);
      50 ->
	  d_field_FileDescriptorProto_service(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9);
      58 ->
	  d_field_FileDescriptorProto_extension(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9);
      66 ->
	  d_field_FileDescriptorProto_options(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9);
      74 ->
	  d_field_FileDescriptorProto_source_code_info(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FileDescriptorProto(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6, F7, F8, F9);
	    1 ->
		skip_64_FileDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9);
	    2 ->
		skip_length_delimited_FileDescriptorProto(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  F6, F7, F8, F9);
	    5 ->
		skip_32_FileDescriptorProto(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9)
	  end
    end;
dg_read_field_def_FileDescriptorProto(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9) ->
    #'FileDescriptorProto'{name = F1, package = F2,
			   dependency = lists:reverse(F3),
			   message_type = lists:reverse(F4),
			   enum_type = lists:reverse(F5),
			   service = lists:reverse(F6),
			   extension = lists:reverse(F7), options = F8,
			   source_code_info = F9}.

d_field_FileDescriptorProto_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileDescriptorProto_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9);
d_field_FileDescriptorProto_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0,
					   NewFValue, F2, F3, F4, F5, F6, F7,
					   F8, F9).


d_field_FileDescriptorProto_package(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileDescriptorProto_package(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9);
d_field_FileDescriptorProto_package(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
				    F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   NewFValue, F3, F4, F5, F6, F7, F8,
					   F9).


d_field_FileDescriptorProto_dependency(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9)
    when N < 57 ->
    d_field_FileDescriptorProto_dependency(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9);
d_field_FileDescriptorProto_dependency(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, [NewFValue | F3], F4, F5, F6, F7,
					   F8, F9).


d_field_FileDescriptorProto_message_type(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9)
    when N < 57 ->
    d_field_FileDescriptorProto_message_type(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9);
d_field_FileDescriptorProto_message_type(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'DescriptorProto'),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, [NewFValue | F4], F5, F6, F7,
					   F8, F9).


d_field_FileDescriptorProto_enum_type(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9)
    when N < 57 ->
    d_field_FileDescriptorProto_enum_type(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9);
d_field_FileDescriptorProto_enum_type(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'EnumDescriptorProto'),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, [NewFValue | F5], F6, F7,
					   F8, F9).


d_field_FileDescriptorProto_service(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileDescriptorProto_service(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9);
d_field_FileDescriptorProto_service(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				    F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'ServiceDescriptorProto'),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, [NewFValue | F6], F7,
					   F8, F9).


d_field_FileDescriptorProto_extension(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9)
    when N < 57 ->
    d_field_FileDescriptorProto_extension(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9);
d_field_FileDescriptorProto_extension(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FieldDescriptorProto'),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, [NewFValue | F7],
					   F8, F9).


d_field_FileDescriptorProto_options(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_FileDescriptorProto_options(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9);
d_field_FileDescriptorProto_options(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				    F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FileOptions'),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7,
					   if F8 == undefined -> NewFValue;
					      true ->
						  merge_msg_FileOptions(F8,
									NewFValue)
					   end,
					   F9).


d_field_FileDescriptorProto_source_code_info(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9)
    when N < 57 ->
    d_field_FileDescriptorProto_source_code_info(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9);
d_field_FileDescriptorProto_source_code_info(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'SourceCodeInfo'),
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8,
					   if F9 == undefined -> NewFValue;
					      true ->
						  merge_msg_SourceCodeInfo(F9,
									   NewFValue)
					   end).


skip_varint_FileDescriptorProto(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    skip_varint_FileDescriptorProto(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9);
skip_varint_FileDescriptorProto(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_FileDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


skip_length_delimited_FileDescriptorProto(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9)
    when N < 57 ->
    skip_length_delimited_FileDescriptorProto(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9);
skip_length_delimited_FileDescriptorProto(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileDescriptorProto(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


skip_32_FileDescriptorProto(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_FileDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


skip_64_FileDescriptorProto(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_FileDescriptorProto(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9).


d_msg_FileDescriptorSet(Bin) ->
    dfp_read_field_def_FileDescriptorSet(Bin, 0, 0, []).

dfp_read_field_def_FileDescriptorSet(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    d_field_FileDescriptorSet_file(Rest, Z1, Z2, F1);
dfp_read_field_def_FileDescriptorSet(<<>>, 0, 0, F1) ->
    #'FileDescriptorSet'{file = lists:reverse(F1)};
dfp_read_field_def_FileDescriptorSet(Other, Z1, Z2,
				     F1) ->
    dg_read_field_def_FileDescriptorSet(Other, Z1, Z2, F1).

dg_read_field_def_FileDescriptorSet(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_FileDescriptorSet(Rest, N + 7,
					X bsl N + Acc, F1);
dg_read_field_def_FileDescriptorSet(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_FileDescriptorSet_file(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_FileDescriptorSet(Rest, 0, 0, F1);
	    1 -> skip_64_FileDescriptorSet(Rest, 0, 0, F1);
	    2 ->
		skip_length_delimited_FileDescriptorSet(Rest, 0, 0, F1);
	    5 -> skip_32_FileDescriptorSet(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_FileDescriptorSet(<<>>, 0, 0, F1) ->
    #'FileDescriptorSet'{file = lists:reverse(F1)}.

d_field_FileDescriptorSet_file(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    d_field_FileDescriptorSet_file(Rest, N + 7,
				   X bsl N + Acc, F1);
d_field_FileDescriptorSet_file(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'FileDescriptorProto'),
    dfp_read_field_def_FileDescriptorSet(Rest2, 0, 0,
					 [NewFValue | F1]).


skip_varint_FileDescriptorSet(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    skip_varint_FileDescriptorSet(Rest, Z1, Z2, F1);
skip_varint_FileDescriptorSet(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    dfp_read_field_def_FileDescriptorSet(Rest, Z1, Z2, F1).


skip_length_delimited_FileDescriptorSet(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_FileDescriptorSet(Rest, N + 7,
					    X bsl N + Acc, F1);
skip_length_delimited_FileDescriptorSet(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileDescriptorSet(Rest2, 0, 0, F1).


skip_32_FileDescriptorSet(<<_:32, Rest/binary>>, Z1, Z2,
			  F1) ->
    dfp_read_field_def_FileDescriptorSet(Rest, Z1, Z2, F1).


skip_64_FileDescriptorSet(<<_:64, Rest/binary>>, Z1, Z2,
			  F1) ->
    dfp_read_field_def_FileDescriptorSet(Rest, Z1, Z2, F1).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'UninterpretedOption.NamePart'{} ->
	  'merge_msg_UninterpretedOption.NamePart'(Prev, New);
      #'UninterpretedOption'{} ->
	  merge_msg_UninterpretedOption(Prev, New);
      #'DescriptorProto.ExtensionRange'{} ->
	  'merge_msg_DescriptorProto.ExtensionRange'(Prev, New);
      #'FileOptions'{} -> merge_msg_FileOptions(Prev, New);
      #'MethodOptions'{} ->
	  merge_msg_MethodOptions(Prev, New);
      #'EnumOptions'{} -> merge_msg_EnumOptions(Prev, New);
      #'EnumValueOptions'{} ->
	  merge_msg_EnumValueOptions(Prev, New);
      #'ServiceOptions'{} ->
	  merge_msg_ServiceOptions(Prev, New);
      #'MethodDescriptorProto'{} ->
	  merge_msg_MethodDescriptorProto(Prev, New);
      #'ServiceDescriptorProto'{} ->
	  merge_msg_ServiceDescriptorProto(Prev, New);
      #'MessageOptions'{} ->
	  merge_msg_MessageOptions(Prev, New);
      #'EnumValueDescriptorProto'{} ->
	  merge_msg_EnumValueDescriptorProto(Prev, New);
      #'EnumDescriptorProto'{} ->
	  merge_msg_EnumDescriptorProto(Prev, New);
      #'FieldOptions'{} -> merge_msg_FieldOptions(Prev, New);
      #'FieldDescriptorProto'{} ->
	  merge_msg_FieldDescriptorProto(Prev, New);
      #'DescriptorProto'{} ->
	  merge_msg_DescriptorProto(Prev, New);
      #'SourceCodeInfo.Location'{} ->
	  'merge_msg_SourceCodeInfo.Location'(Prev, New);
      #'SourceCodeInfo'{} ->
	  merge_msg_SourceCodeInfo(Prev, New);
      #'FileDescriptorProto'{} ->
	  merge_msg_FileDescriptorProto(Prev, New);
      #'FileDescriptorSet'{} ->
	  merge_msg_FileDescriptorSet(Prev, New)
    end.

'merge_msg_UninterpretedOption.NamePart'(#'UninterpretedOption.NamePart'{name_part
									     =
									     PFname_part,
									 is_extension
									     =
									     PFis_extension},
					 #'UninterpretedOption.NamePart'{name_part
									     =
									     NFname_part,
									 is_extension
									     =
									     NFis_extension}) ->
    #'UninterpretedOption.NamePart'{name_part =
					if NFname_part =:= undefined ->
					       PFname_part;
					   true -> NFname_part
					end,
				    is_extension =
					if NFis_extension =:= undefined ->
					       PFis_extension;
					   true -> NFis_extension
					end}.

merge_msg_UninterpretedOption(#'UninterpretedOption'{name
							 = PFname,
						     identifier_value =
							 PFidentifier_value,
						     positive_int_value =
							 PFpositive_int_value,
						     negative_int_value =
							 PFnegative_int_value,
						     double_value =
							 PFdouble_value,
						     string_value =
							 PFstring_value,
						     aggregate_value =
							 PFaggregate_value},
			      #'UninterpretedOption'{name = NFname,
						     identifier_value =
							 NFidentifier_value,
						     positive_int_value =
							 NFpositive_int_value,
						     negative_int_value =
							 NFnegative_int_value,
						     double_value =
							 NFdouble_value,
						     string_value =
							 NFstring_value,
						     aggregate_value =
							 NFaggregate_value}) ->
    #'UninterpretedOption'{name = PFname ++ NFname,
			   identifier_value =
			       if NFidentifier_value =:= undefined ->
				      PFidentifier_value;
				  true -> NFidentifier_value
			       end,
			   positive_int_value =
			       if NFpositive_int_value =:= undefined ->
				      PFpositive_int_value;
				  true -> NFpositive_int_value
			       end,
			   negative_int_value =
			       if NFnegative_int_value =:= undefined ->
				      PFnegative_int_value;
				  true -> NFnegative_int_value
			       end,
			   double_value =
			       if NFdouble_value =:= undefined ->
				      PFdouble_value;
				  true -> NFdouble_value
			       end,
			   string_value =
			       if NFstring_value =:= undefined ->
				      PFstring_value;
				  true -> NFstring_value
			       end,
			   aggregate_value =
			       if NFaggregate_value =:= undefined ->
				      PFaggregate_value;
				  true -> NFaggregate_value
			       end}.

'merge_msg_DescriptorProto.ExtensionRange'(#'DescriptorProto.ExtensionRange'{start
										 =
										 PFstart,
									     'end'
										 =
										 PFend},
					   #'DescriptorProto.ExtensionRange'{start
										 =
										 NFstart,
									     'end'
										 =
										 NFend}) ->
    #'DescriptorProto.ExtensionRange'{start =
					  if NFstart =:= undefined -> PFstart;
					     true -> NFstart
					  end,
				      'end' =
					  if NFend =:= undefined -> PFend;
					     true -> NFend
					  end}.

merge_msg_FileOptions(Prev, undefined) -> Prev;
merge_msg_FileOptions(undefined, New) -> New;
merge_msg_FileOptions(#'FileOptions'{java_package =
					 PFjava_package,
				     java_outer_classname =
					 PFjava_outer_classname,
				     java_multiple_files =
					 PFjava_multiple_files,
				     java_generate_equals_and_hash =
					 PFjava_generate_equals_and_hash,
				     optimize_for = PFoptimize_for,
				     cc_generic_services =
					 PFcc_generic_services,
				     java_generic_services =
					 PFjava_generic_services,
				     py_generic_services =
					 PFpy_generic_services,
				     uninterpreted_option =
					 PFuninterpreted_option},
		      #'FileOptions'{java_package = NFjava_package,
				     java_outer_classname =
					 NFjava_outer_classname,
				     java_multiple_files =
					 NFjava_multiple_files,
				     java_generate_equals_and_hash =
					 NFjava_generate_equals_and_hash,
				     optimize_for = NFoptimize_for,
				     cc_generic_services =
					 NFcc_generic_services,
				     java_generic_services =
					 NFjava_generic_services,
				     py_generic_services =
					 NFpy_generic_services,
				     uninterpreted_option =
					 NFuninterpreted_option}) ->
    #'FileOptions'{java_package =
		       if NFjava_package =:= undefined -> PFjava_package;
			  true -> NFjava_package
		       end,
		   java_outer_classname =
		       if NFjava_outer_classname =:= undefined ->
			      PFjava_outer_classname;
			  true -> NFjava_outer_classname
		       end,
		   java_multiple_files =
		       if NFjava_multiple_files =:= undefined ->
			      PFjava_multiple_files;
			  true -> NFjava_multiple_files
		       end,
		   java_generate_equals_and_hash =
		       if NFjava_generate_equals_and_hash =:= undefined ->
			      PFjava_generate_equals_and_hash;
			  true -> NFjava_generate_equals_and_hash
		       end,
		   optimize_for =
		       if NFoptimize_for =:= undefined -> PFoptimize_for;
			  true -> NFoptimize_for
		       end,
		   cc_generic_services =
		       if NFcc_generic_services =:= undefined ->
			      PFcc_generic_services;
			  true -> NFcc_generic_services
		       end,
		   java_generic_services =
		       if NFjava_generic_services =:= undefined ->
			      PFjava_generic_services;
			  true -> NFjava_generic_services
		       end,
		   py_generic_services =
		       if NFpy_generic_services =:= undefined ->
			      PFpy_generic_services;
			  true -> NFpy_generic_services
		       end,
		   uninterpreted_option =
		       PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_MethodOptions(Prev, undefined) -> Prev;
merge_msg_MethodOptions(undefined, New) -> New;
merge_msg_MethodOptions(#'MethodOptions'{uninterpreted_option
					     = PFuninterpreted_option},
			#'MethodOptions'{uninterpreted_option =
					     NFuninterpreted_option}) ->
    #'MethodOptions'{uninterpreted_option =
			 PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_EnumOptions(Prev, undefined) -> Prev;
merge_msg_EnumOptions(undefined, New) -> New;
merge_msg_EnumOptions(#'EnumOptions'{uninterpreted_option
					 = PFuninterpreted_option},
		      #'EnumOptions'{uninterpreted_option =
					 NFuninterpreted_option}) ->
    #'EnumOptions'{uninterpreted_option =
		       PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_EnumValueOptions(Prev, undefined) -> Prev;
merge_msg_EnumValueOptions(undefined, New) -> New;
merge_msg_EnumValueOptions(#'EnumValueOptions'{uninterpreted_option
						   = PFuninterpreted_option},
			   #'EnumValueOptions'{uninterpreted_option =
						   NFuninterpreted_option}) ->
    #'EnumValueOptions'{uninterpreted_option =
			    PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_ServiceOptions(Prev, undefined) -> Prev;
merge_msg_ServiceOptions(undefined, New) -> New;
merge_msg_ServiceOptions(#'ServiceOptions'{uninterpreted_option
					       = PFuninterpreted_option},
			 #'ServiceOptions'{uninterpreted_option =
					       NFuninterpreted_option}) ->
    #'ServiceOptions'{uninterpreted_option =
			  PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_MethodDescriptorProto(#'MethodDescriptorProto'{name
							     = PFname,
							 input_type =
							     PFinput_type,
							 output_type =
							     PFoutput_type,
							 options = PFoptions},
				#'MethodDescriptorProto'{name = NFname,
							 input_type =
							     NFinput_type,
							 output_type =
							     NFoutput_type,
							 options =
							     NFoptions}) ->
    #'MethodDescriptorProto'{name =
				 if NFname =:= undefined -> PFname;
				    true -> NFname
				 end,
			     input_type =
				 if NFinput_type =:= undefined -> PFinput_type;
				    true -> NFinput_type
				 end,
			     output_type =
				 if NFoutput_type =:= undefined ->
					PFoutput_type;
				    true -> NFoutput_type
				 end,
			     options =
				 merge_msg_MethodOptions(PFoptions, NFoptions)}.

merge_msg_ServiceDescriptorProto(#'ServiceDescriptorProto'{name
							       = PFname,
							   method = PFmethod,
							   options = PFoptions},
				 #'ServiceDescriptorProto'{name = NFname,
							   method = NFmethod,
							   options =
							       NFoptions}) ->
    #'ServiceDescriptorProto'{name =
				  if NFname =:= undefined -> PFname;
				     true -> NFname
				  end,
			      method = PFmethod ++ NFmethod,
			      options =
				  merge_msg_ServiceOptions(PFoptions,
							   NFoptions)}.

merge_msg_MessageOptions(Prev, undefined) -> Prev;
merge_msg_MessageOptions(undefined, New) -> New;
merge_msg_MessageOptions(#'MessageOptions'{message_set_wire_format
					       = PFmessage_set_wire_format,
					   no_standard_descriptor_accessor =
					       PFno_standard_descriptor_accessor,
					   uninterpreted_option =
					       PFuninterpreted_option},
			 #'MessageOptions'{message_set_wire_format =
					       NFmessage_set_wire_format,
					   no_standard_descriptor_accessor =
					       NFno_standard_descriptor_accessor,
					   uninterpreted_option =
					       NFuninterpreted_option}) ->
    #'MessageOptions'{message_set_wire_format =
			  if NFmessage_set_wire_format =:= undefined ->
				 PFmessage_set_wire_format;
			     true -> NFmessage_set_wire_format
			  end,
		      no_standard_descriptor_accessor =
			  if NFno_standard_descriptor_accessor =:= undefined ->
				 PFno_standard_descriptor_accessor;
			     true -> NFno_standard_descriptor_accessor
			  end,
		      uninterpreted_option =
			  PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_EnumValueDescriptorProto(#'EnumValueDescriptorProto'{name
								   = PFname,
							       number =
								   PFnumber,
							       options =
								   PFoptions},
				   #'EnumValueDescriptorProto'{name = NFname,
							       number =
								   NFnumber,
							       options =
								   NFoptions}) ->
    #'EnumValueDescriptorProto'{name =
				    if NFname =:= undefined -> PFname;
				       true -> NFname
				    end,
				number =
				    if NFnumber =:= undefined -> PFnumber;
				       true -> NFnumber
				    end,
				options =
				    merge_msg_EnumValueOptions(PFoptions,
							       NFoptions)}.

merge_msg_EnumDescriptorProto(#'EnumDescriptorProto'{name
							 = PFname,
						     value = PFvalue,
						     options = PFoptions},
			      #'EnumDescriptorProto'{name = NFname,
						     value = NFvalue,
						     options = NFoptions}) ->
    #'EnumDescriptorProto'{name =
			       if NFname =:= undefined -> PFname;
				  true -> NFname
			       end,
			   value = PFvalue ++ NFvalue,
			   options =
			       merge_msg_EnumOptions(PFoptions, NFoptions)}.

merge_msg_FieldOptions(Prev, undefined) -> Prev;
merge_msg_FieldOptions(undefined, New) -> New;
merge_msg_FieldOptions(#'FieldOptions'{ctype = PFctype,
				       packed = PFpacked,
				       deprecated = PFdeprecated,
				       experimental_map_key =
					   PFexperimental_map_key,
				       uninterpreted_option =
					   PFuninterpreted_option},
		       #'FieldOptions'{ctype = NFctype, packed = NFpacked,
				       deprecated = NFdeprecated,
				       experimental_map_key =
					   NFexperimental_map_key,
				       uninterpreted_option =
					   NFuninterpreted_option}) ->
    #'FieldOptions'{ctype =
			if NFctype =:= undefined -> PFctype;
			   true -> NFctype
			end,
		    packed =
			if NFpacked =:= undefined -> PFpacked;
			   true -> NFpacked
			end,
		    deprecated =
			if NFdeprecated =:= undefined -> PFdeprecated;
			   true -> NFdeprecated
			end,
		    experimental_map_key =
			if NFexperimental_map_key =:= undefined ->
			       PFexperimental_map_key;
			   true -> NFexperimental_map_key
			end,
		    uninterpreted_option =
			PFuninterpreted_option ++ NFuninterpreted_option}.

merge_msg_FieldDescriptorProto(#'FieldDescriptorProto'{name
							   = PFname,
						       number = PFnumber,
						       label = PFlabel,
						       type = PFtype,
						       type_name = PFtype_name,
						       extendee = PFextendee,
						       default_value =
							   PFdefault_value,
						       options = PFoptions},
			       #'FieldDescriptorProto'{name = NFname,
						       number = NFnumber,
						       label = NFlabel,
						       type = NFtype,
						       type_name = NFtype_name,
						       extendee = NFextendee,
						       default_value =
							   NFdefault_value,
						       options = NFoptions}) ->
    #'FieldDescriptorProto'{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end,
			    number =
				if NFnumber =:= undefined -> PFnumber;
				   true -> NFnumber
				end,
			    label =
				if NFlabel =:= undefined -> PFlabel;
				   true -> NFlabel
				end,
			    type =
				if NFtype =:= undefined -> PFtype;
				   true -> NFtype
				end,
			    type_name =
				if NFtype_name =:= undefined -> PFtype_name;
				   true -> NFtype_name
				end,
			    extendee =
				if NFextendee =:= undefined -> PFextendee;
				   true -> NFextendee
				end,
			    default_value =
				if NFdefault_value =:= undefined ->
				       PFdefault_value;
				   true -> NFdefault_value
				end,
			    options =
				merge_msg_FieldOptions(PFoptions, NFoptions)}.

merge_msg_DescriptorProto(#'DescriptorProto'{name =
						 PFname,
					     field = PFfield,
					     extension = PFextension,
					     nested_type = PFnested_type,
					     enum_type = PFenum_type,
					     extension_range =
						 PFextension_range,
					     options = PFoptions},
			  #'DescriptorProto'{name = NFname, field = NFfield,
					     extension = NFextension,
					     nested_type = NFnested_type,
					     enum_type = NFenum_type,
					     extension_range =
						 NFextension_range,
					     options = NFoptions}) ->
    #'DescriptorProto'{name =
			   if NFname =:= undefined -> PFname;
			      true -> NFname
			   end,
		       field = PFfield ++ NFfield,
		       extension = PFextension ++ NFextension,
		       nested_type = PFnested_type ++ NFnested_type,
		       enum_type = PFenum_type ++ NFenum_type,
		       extension_range =
			   PFextension_range ++ NFextension_range,
		       options =
			   merge_msg_MessageOptions(PFoptions, NFoptions)}.

'merge_msg_SourceCodeInfo.Location'(#'SourceCodeInfo.Location'{path
								   = PFpath,
							       span = PFspan},
				    #'SourceCodeInfo.Location'{path = NFpath,
							       span =
								   NFspan}) ->
    #'SourceCodeInfo.Location'{path = PFpath ++ NFpath,
			       span = PFspan ++ NFspan}.

merge_msg_SourceCodeInfo(Prev, undefined) -> Prev;
merge_msg_SourceCodeInfo(undefined, New) -> New;
merge_msg_SourceCodeInfo(#'SourceCodeInfo'{location =
					       PFlocation},
			 #'SourceCodeInfo'{location = NFlocation}) ->
    #'SourceCodeInfo'{location = PFlocation ++ NFlocation}.

merge_msg_FileDescriptorProto(#'FileDescriptorProto'{name
							 = PFname,
						     package = PFpackage,
						     dependency = PFdependency,
						     message_type =
							 PFmessage_type,
						     enum_type = PFenum_type,
						     service = PFservice,
						     extension = PFextension,
						     options = PFoptions,
						     source_code_info =
							 PFsource_code_info},
			      #'FileDescriptorProto'{name = NFname,
						     package = NFpackage,
						     dependency = NFdependency,
						     message_type =
							 NFmessage_type,
						     enum_type = NFenum_type,
						     service = NFservice,
						     extension = NFextension,
						     options = NFoptions,
						     source_code_info =
							 NFsource_code_info}) ->
    #'FileDescriptorProto'{name =
			       if NFname =:= undefined -> PFname;
				  true -> NFname
			       end,
			   package =
			       if NFpackage =:= undefined -> PFpackage;
				  true -> NFpackage
			       end,
			   dependency = PFdependency ++ NFdependency,
			   message_type = PFmessage_type ++ NFmessage_type,
			   enum_type = PFenum_type ++ NFenum_type,
			   service = PFservice ++ NFservice,
			   extension = PFextension ++ NFextension,
			   options =
			       merge_msg_FileOptions(PFoptions, NFoptions),
			   source_code_info =
			       merge_msg_SourceCodeInfo(PFsource_code_info,
							NFsource_code_info)}.

merge_msg_FileDescriptorSet(#'FileDescriptorSet'{file =
						     PFfile},
			    #'FileDescriptorSet'{file = NFfile}) ->
    #'FileDescriptorSet'{file = PFfile ++ NFfile}.



verify_msg(Msg) ->
    case Msg of
      #'UninterpretedOption.NamePart'{} ->
	  'v_msg_UninterpretedOption.NamePart'(Msg,
					       ['UninterpretedOption.NamePart']);
      #'UninterpretedOption'{} ->
	  v_msg_UninterpretedOption(Msg, ['UninterpretedOption']);
      #'DescriptorProto.ExtensionRange'{} ->
	  'v_msg_DescriptorProto.ExtensionRange'(Msg,
						 ['DescriptorProto.ExtensionRange']);
      #'FileOptions'{} ->
	  v_msg_FileOptions(Msg, ['FileOptions']);
      #'MethodOptions'{} ->
	  v_msg_MethodOptions(Msg, ['MethodOptions']);
      #'EnumOptions'{} ->
	  v_msg_EnumOptions(Msg, ['EnumOptions']);
      #'EnumValueOptions'{} ->
	  v_msg_EnumValueOptions(Msg, ['EnumValueOptions']);
      #'ServiceOptions'{} ->
	  v_msg_ServiceOptions(Msg, ['ServiceOptions']);
      #'MethodDescriptorProto'{} ->
	  v_msg_MethodDescriptorProto(Msg,
				      ['MethodDescriptorProto']);
      #'ServiceDescriptorProto'{} ->
	  v_msg_ServiceDescriptorProto(Msg,
				       ['ServiceDescriptorProto']);
      #'MessageOptions'{} ->
	  v_msg_MessageOptions(Msg, ['MessageOptions']);
      #'EnumValueDescriptorProto'{} ->
	  v_msg_EnumValueDescriptorProto(Msg,
					 ['EnumValueDescriptorProto']);
      #'EnumDescriptorProto'{} ->
	  v_msg_EnumDescriptorProto(Msg, ['EnumDescriptorProto']);
      #'FieldOptions'{} ->
	  v_msg_FieldOptions(Msg, ['FieldOptions']);
      #'FieldDescriptorProto'{} ->
	  v_msg_FieldDescriptorProto(Msg,
				     ['FieldDescriptorProto']);
      #'DescriptorProto'{} ->
	  v_msg_DescriptorProto(Msg, ['DescriptorProto']);
      #'SourceCodeInfo.Location'{} ->
	  'v_msg_SourceCodeInfo.Location'(Msg,
					  ['SourceCodeInfo.Location']);
      #'SourceCodeInfo'{} ->
	  v_msg_SourceCodeInfo(Msg, ['SourceCodeInfo']);
      #'FileDescriptorProto'{} ->
	  v_msg_FileDescriptorProto(Msg, ['FileDescriptorProto']);
      #'FileDescriptorSet'{} ->
	  v_msg_FileDescriptorSet(Msg, ['FileDescriptorSet']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


'v_msg_UninterpretedOption.NamePart'(#'UninterpretedOption.NamePart'{name_part
									 = F1,
								     is_extension
									 = F2},
				     Path) ->
    v_type_string(F1, [name_part | Path]),
    v_type_bool(F2, [is_extension | Path]),
    ok;
'v_msg_UninterpretedOption.NamePart'(X, Path) ->
    mk_type_error({expected_msg,
		   'UninterpretedOption.NamePart'},
		  X, Path).

v_msg_UninterpretedOption(#'UninterpretedOption'{name =
						     F1,
						 identifier_value = F2,
						 positive_int_value = F3,
						 negative_int_value = F4,
						 double_value = F5,
						 string_value = F6,
						 aggregate_value = F7},
			  Path) ->
    if is_list(F1) ->
	   ['v_msg_UninterpretedOption.NamePart'(Elem,
						 [name | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption.NamePart'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [identifier_value | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [positive_int_value | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [negative_int_value | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_double(F5, [double_value | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [string_value | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [aggregate_value | Path])
    end,
    ok;
v_msg_UninterpretedOption(X, Path) ->
    mk_type_error({expected_msg, 'UninterpretedOption'}, X,
		  Path).

'v_msg_DescriptorProto.ExtensionRange'(#'DescriptorProto.ExtensionRange'{start
									     =
									     F1,
									 'end' =
									     F2},
				       Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [start | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, ['end' | Path])
    end,
    ok;
'v_msg_DescriptorProto.ExtensionRange'(X, Path) ->
    mk_type_error({expected_msg,
		   'DescriptorProto.ExtensionRange'},
		  X, Path).

v_msg_FileOptions(#'FileOptions'{java_package = F1,
				 java_outer_classname = F2,
				 java_multiple_files = F3,
				 java_generate_equals_and_hash = F4,
				 optimize_for = F5, cc_generic_services = F6,
				 java_generic_services = F7,
				 py_generic_services = F8,
				 uninterpreted_option = F9},
		  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [java_package | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [java_outer_classname | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [java_multiple_files | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bool(F4, [java_generate_equals_and_hash | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_enum_FileOptions.OptimizeMode'(F5,
					     [optimize_for | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [cc_generic_services | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [java_generic_services | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [py_generic_services | Path])
    end,
    if is_list(F9) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F9];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F9, Path)
    end,
    ok;
v_msg_FileOptions(X, Path) ->
    mk_type_error({expected_msg, 'FileOptions'}, X, Path).

v_msg_MethodOptions(#'MethodOptions'{uninterpreted_option
					 = F1},
		    Path) ->
    if is_list(F1) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F1, Path)
    end,
    ok;
v_msg_MethodOptions(X, Path) ->
    mk_type_error({expected_msg, 'MethodOptions'}, X, Path).

v_msg_EnumOptions(#'EnumOptions'{uninterpreted_option =
				     F1},
		  Path) ->
    if is_list(F1) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F1, Path)
    end,
    ok;
v_msg_EnumOptions(X, Path) ->
    mk_type_error({expected_msg, 'EnumOptions'}, X, Path).

v_msg_EnumValueOptions(#'EnumValueOptions'{uninterpreted_option
					       = F1},
		       Path) ->
    if is_list(F1) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F1, Path)
    end,
    ok;
v_msg_EnumValueOptions(X, Path) ->
    mk_type_error({expected_msg, 'EnumValueOptions'}, X,
		  Path).

v_msg_ServiceOptions(#'ServiceOptions'{uninterpreted_option
					   = F1},
		     Path) ->
    if is_list(F1) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F1, Path)
    end,
    ok;
v_msg_ServiceOptions(X, Path) ->
    mk_type_error({expected_msg, 'ServiceOptions'}, X,
		  Path).

v_msg_MethodDescriptorProto(#'MethodDescriptorProto'{name
							 = F1,
						     input_type = F2,
						     output_type = F3,
						     options = F4},
			    Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [input_type | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [output_type | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_MethodOptions(F4, [options | Path])
    end,
    ok;
v_msg_MethodDescriptorProto(X, Path) ->
    mk_type_error({expected_msg, 'MethodDescriptorProto'},
		  X, Path).

v_msg_ServiceDescriptorProto(#'ServiceDescriptorProto'{name
							   = F1,
						       method = F2,
						       options = F3},
			     Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   [v_msg_MethodDescriptorProto(Elem, [method | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'MethodDescriptorProto'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_ServiceOptions(F3, [options | Path])
    end,
    ok;
v_msg_ServiceDescriptorProto(X, Path) ->
    mk_type_error({expected_msg, 'ServiceDescriptorProto'},
		  X, Path).

v_msg_MessageOptions(#'MessageOptions'{message_set_wire_format
					   = F1,
				       no_standard_descriptor_accessor = F2,
				       uninterpreted_option = F3},
		     Path) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bool(F1, [message_set_wire_format | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2,
		       [no_standard_descriptor_accessor | Path])
    end,
    if is_list(F3) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F3, Path)
    end,
    ok;
v_msg_MessageOptions(X, Path) ->
    mk_type_error({expected_msg, 'MessageOptions'}, X,
		  Path).

v_msg_EnumValueDescriptorProto(#'EnumValueDescriptorProto'{name
							       = F1,
							   number = F2,
							   options = F3},
			       Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [number | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_msg_EnumValueOptions(F3, [options | Path])
    end,
    ok;
v_msg_EnumValueDescriptorProto(X, Path) ->
    mk_type_error({expected_msg,
		   'EnumValueDescriptorProto'},
		  X, Path).

v_msg_EnumDescriptorProto(#'EnumDescriptorProto'{name =
						     F1,
						 value = F2, options = F3},
			  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   [v_msg_EnumValueDescriptorProto(Elem, [value | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'EnumValueDescriptorProto'}},
			 F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_EnumOptions(F3, [options | Path])
    end,
    ok;
v_msg_EnumDescriptorProto(X, Path) ->
    mk_type_error({expected_msg, 'EnumDescriptorProto'}, X,
		  Path).

v_msg_FieldOptions(#'FieldOptions'{ctype = F1,
				   packed = F2, deprecated = F3,
				   experimental_map_key = F4,
				   uninterpreted_option = F5},
		   Path) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_FieldOptions.CType'(F1, [ctype | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [packed | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [deprecated | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [experimental_map_key | Path])
    end,
    if is_list(F5) ->
	   [v_msg_UninterpretedOption(Elem,
				      [uninterpreted_option | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'UninterpretedOption'}},
			 F5, Path)
    end,
    ok;
v_msg_FieldOptions(X, Path) ->
    mk_type_error({expected_msg, 'FieldOptions'}, X, Path).

v_msg_FieldDescriptorProto(#'FieldDescriptorProto'{name
						       = F1,
						   number = F2, label = F3,
						   type = F4, type_name = F5,
						   extendee = F6,
						   default_value = F7,
						   options = F8},
			   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [number | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_FieldDescriptorProto.Label'(F3, [label | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_FieldDescriptorProto.Type'(F4, [type | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [type_name | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [extendee | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [default_value | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_msg_FieldOptions(F8, [options | Path])
    end,
    ok;
v_msg_FieldDescriptorProto(X, Path) ->
    mk_type_error({expected_msg, 'FieldDescriptorProto'}, X,
		  Path).

v_msg_DescriptorProto(#'DescriptorProto'{name = F1,
					 field = F2, extension = F3,
					 nested_type = F4, enum_type = F5,
					 extension_range = F6, options = F7},
		      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
	   [v_msg_FieldDescriptorProto(Elem, [field | Path])
	    || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FieldDescriptorProto'}},
			 F2, Path)
    end,
    if is_list(F3) ->
	   [v_msg_FieldDescriptorProto(Elem, [extension | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FieldDescriptorProto'}},
			 F3, Path)
    end,
    if is_list(F4) ->
	   [v_msg_DescriptorProto(Elem, [nested_type | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto'}},
			 F4, Path)
    end,
    if is_list(F5) ->
	   [v_msg_EnumDescriptorProto(Elem, [enum_type | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'EnumDescriptorProto'}},
			 F5, Path)
    end,
    if is_list(F6) ->
	   ['v_msg_DescriptorProto.ExtensionRange'(Elem,
						   [extension_range | Path])
	    || Elem <- F6];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto.ExtensionRange'}},
			 F6, Path)
    end,
    if F7 == undefined -> ok;
       true -> v_msg_MessageOptions(F7, [options | Path])
    end,
    ok;
v_msg_DescriptorProto(X, Path) ->
    mk_type_error({expected_msg, 'DescriptorProto'}, X,
		  Path).

'v_msg_SourceCodeInfo.Location'(#'SourceCodeInfo.Location'{path
							       = F1,
							   span = F2},
				Path) ->
    if is_list(F1) ->
	   [v_type_int32(Elem, [path | Path]) || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of, int32}, F1, Path)
    end,
    if is_list(F2) ->
	   [v_type_int32(Elem, [span | Path]) || Elem <- F2];
       true ->
	   mk_type_error({invalid_list_of, int32}, F2, Path)
    end,
    ok;
'v_msg_SourceCodeInfo.Location'(X, Path) ->
    mk_type_error({expected_msg, 'SourceCodeInfo.Location'},
		  X, Path).

v_msg_SourceCodeInfo(#'SourceCodeInfo'{location = F1},
		     Path) ->
    if is_list(F1) ->
	   ['v_msg_SourceCodeInfo.Location'(Elem,
					    [location | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'SourceCodeInfo.Location'}},
			 F1, Path)
    end,
    ok;
v_msg_SourceCodeInfo(X, Path) ->
    mk_type_error({expected_msg, 'SourceCodeInfo'}, X,
		  Path).

v_msg_FileDescriptorProto(#'FileDescriptorProto'{name =
						     F1,
						 package = F2, dependency = F3,
						 message_type = F4,
						 enum_type = F5, service = F6,
						 extension = F7, options = F8,
						 source_code_info = F9},
			  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [package | Path])
    end,
    if is_list(F3) ->
	   [v_type_string(Elem, [dependency | Path])
	    || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    if is_list(F4) ->
	   [v_msg_DescriptorProto(Elem, [message_type | Path])
	    || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'DescriptorProto'}},
			 F4, Path)
    end,
    if is_list(F5) ->
	   [v_msg_EnumDescriptorProto(Elem, [enum_type | Path])
	    || Elem <- F5];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'EnumDescriptorProto'}},
			 F5, Path)
    end,
    if is_list(F6) ->
	   [v_msg_ServiceDescriptorProto(Elem, [service | Path])
	    || Elem <- F6];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ServiceDescriptorProto'}},
			 F6, Path)
    end,
    if is_list(F7) ->
	   [v_msg_FieldDescriptorProto(Elem, [extension | Path])
	    || Elem <- F7];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FieldDescriptorProto'}},
			 F7, Path)
    end,
    if F8 == undefined -> ok;
       true -> v_msg_FileOptions(F8, [options | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_SourceCodeInfo(F9, [source_code_info | Path])
    end,
    ok;
v_msg_FileDescriptorProto(X, Path) ->
    mk_type_error({expected_msg, 'FileDescriptorProto'}, X,
		  Path).

v_msg_FileDescriptorSet(#'FileDescriptorSet'{file = F1},
			Path) ->
    if is_list(F1) ->
	   [v_msg_FileDescriptorProto(Elem, [file | Path])
	    || Elem <- F1];
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FileDescriptorProto'}},
			 F1, Path)
    end,
    ok.

'v_enum_FieldDescriptorProto.Type'('TYPE_DOUBLE',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_FLOAT',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_INT64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_UINT64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_INT32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_FIXED64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_FIXED32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_BOOL',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_STRING',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_GROUP',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_MESSAGE',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_BYTES',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_UINT32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_ENUM',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SFIXED32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SFIXED64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SINT32',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'('TYPE_SINT64',
				   _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FieldDescriptorProto.Type'},
		  X, Path).

'v_enum_FieldDescriptorProto.Label'('LABEL_OPTIONAL',
				    _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Label'('LABEL_REQUIRED',
				    _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Label'('LABEL_REPEATED',
				    _Path) ->
    ok;
'v_enum_FieldDescriptorProto.Label'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FieldDescriptorProto.Label'},
		  X, Path).

'v_enum_FileOptions.OptimizeMode'('SPEED', _Path) -> ok;
'v_enum_FileOptions.OptimizeMode'('CODE_SIZE', _Path) ->
    ok;
'v_enum_FileOptions.OptimizeMode'('LITE_RUNTIME',
				  _Path) ->
    ok;
'v_enum_FileOptions.OptimizeMode'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FileOptions.OptimizeMode'},
		  X, Path).

'v_enum_FieldOptions.CType'('STRING', _Path) -> ok;
'v_enum_FieldOptions.CType'('CORD', _Path) -> ok;
'v_enum_FieldOptions.CType'('STRING_PIECE', _Path) ->
    ok;
'v_enum_FieldOptions.CType'(X, Path) ->
    mk_type_error({invalid_enum, 'FieldOptions.CType'}, X,
		  Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

v_type_string(S, Path) when is_list(S) ->
    try unicode:characters_to_binary(S), ok catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{enum, 'FieldDescriptorProto.Type'},
      [{'TYPE_DOUBLE', 1}, {'TYPE_FLOAT', 2},
       {'TYPE_INT64', 3}, {'TYPE_UINT64', 4},
       {'TYPE_INT32', 5}, {'TYPE_FIXED64', 6},
       {'TYPE_FIXED32', 7}, {'TYPE_BOOL', 8},
       {'TYPE_STRING', 9}, {'TYPE_GROUP', 10},
       {'TYPE_MESSAGE', 11}, {'TYPE_BYTES', 12},
       {'TYPE_UINT32', 13}, {'TYPE_ENUM', 14},
       {'TYPE_SFIXED32', 15}, {'TYPE_SFIXED64', 16},
       {'TYPE_SINT32', 17}, {'TYPE_SINT64', 18}]},
     {{enum, 'FieldDescriptorProto.Label'},
      [{'LABEL_OPTIONAL', 1}, {'LABEL_REQUIRED', 2},
       {'LABEL_REPEATED', 3}]},
     {{enum, 'FileOptions.OptimizeMode'},
      [{'SPEED', 1}, {'CODE_SIZE', 2}, {'LITE_RUNTIME', 3}]},
     {{enum, 'FieldOptions.CType'},
      [{'STRING', 0}, {'CORD', 1}, {'STRING_PIECE', 2}]},
     {{msg, 'UninterpretedOption.NamePart'},
      [#field{name = name_part, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = is_extension, fnum = 2, rnum = 3,
	      type = bool, occurrence = required, opts = []}]},
     {{msg, 'UninterpretedOption'},
      [#field{name = name, fnum = 2, rnum = 2,
	      type = {msg, 'UninterpretedOption.NamePart'},
	      occurrence = repeated, opts = []},
       #field{name = identifier_value, fnum = 3, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = positive_int_value, fnum = 4, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = negative_int_value, fnum = 5, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = double_value, fnum = 6, rnum = 6,
	      type = double, occurrence = optional, opts = []},
       #field{name = string_value, fnum = 7, rnum = 7,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = aggregate_value, fnum = 8, rnum = 8,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'DescriptorProto.ExtensionRange'},
      [#field{name = start, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'FileOptions'},
      [#field{name = java_package, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = java_outer_classname, fnum = 8, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = java_multiple_files, fnum = 10, rnum = 4,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = java_generate_equals_and_hash, fnum = 20,
	      rnum = 5, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = optimize_for, fnum = 9, rnum = 6,
	      type = {enum, 'FileOptions.OptimizeMode'},
	      occurrence = optional, opts = [{default, 'SPEED'}]},
       #field{name = cc_generic_services, fnum = 16, rnum = 7,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = java_generic_services, fnum = 17,
	      rnum = 8, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = py_generic_services, fnum = 18, rnum = 9,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 10, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'MethodOptions'},
      [#field{name = uninterpreted_option, fnum = 999,
	      rnum = 2, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'EnumOptions'},
      [#field{name = uninterpreted_option, fnum = 999,
	      rnum = 2, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'EnumValueOptions'},
      [#field{name = uninterpreted_option, fnum = 999,
	      rnum = 2, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ServiceOptions'},
      [#field{name = uninterpreted_option, fnum = 999,
	      rnum = 2, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'MethodDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = input_type, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = output_type, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = options, fnum = 4, rnum = 5,
	      type = {msg, 'MethodOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ServiceDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = method, fnum = 2, rnum = 3,
	      type = {msg, 'MethodDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 3, rnum = 4,
	      type = {msg, 'ServiceOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'MessageOptions'},
      [#field{name = message_set_wire_format, fnum = 1,
	      rnum = 2, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = no_standard_descriptor_accessor, fnum = 2,
	      rnum = 3, type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 4, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'EnumValueDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = number, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = options, fnum = 3, rnum = 4,
	      type = {msg, 'EnumValueOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'EnumDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3,
	      type = {msg, 'EnumValueDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 3, rnum = 4,
	      type = {msg, 'EnumOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'FieldOptions'},
      [#field{name = ctype, fnum = 1, rnum = 2,
	      type = {enum, 'FieldOptions.CType'},
	      occurrence = optional, opts = [{default, 'STRING'}]},
       #field{name = packed, fnum = 2, rnum = 3, type = bool,
	      occurrence = optional, opts = []},
       #field{name = deprecated, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = experimental_map_key, fnum = 9, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = uninterpreted_option, fnum = 999,
	      rnum = 6, type = {msg, 'UninterpretedOption'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'FieldDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = number, fnum = 3, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = label, fnum = 4, rnum = 4,
	      type = {enum, 'FieldDescriptorProto.Label'},
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 5, rnum = 5,
	      type = {enum, 'FieldDescriptorProto.Type'},
	      occurrence = optional, opts = []},
       #field{name = type_name, fnum = 6, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = extendee, fnum = 2, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = default_value, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = options, fnum = 8, rnum = 9,
	      type = {msg, 'FieldOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'DescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = field, fnum = 2, rnum = 3,
	      type = {msg, 'FieldDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = extension, fnum = 6, rnum = 4,
	      type = {msg, 'FieldDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = nested_type, fnum = 3, rnum = 5,
	      type = {msg, 'DescriptorProto'}, occurrence = repeated,
	      opts = []},
       #field{name = enum_type, fnum = 4, rnum = 6,
	      type = {msg, 'EnumDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = extension_range, fnum = 5, rnum = 7,
	      type = {msg, 'DescriptorProto.ExtensionRange'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 7, rnum = 8,
	      type = {msg, 'MessageOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'SourceCodeInfo.Location'},
      [#field{name = path, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = [packed]},
       #field{name = span, fnum = 2, rnum = 3, type = int32,
	      occurrence = repeated, opts = [packed]}]},
     {{msg, 'SourceCodeInfo'},
      [#field{name = location, fnum = 1, rnum = 2,
	      type = {msg, 'SourceCodeInfo.Location'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'FileDescriptorProto'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = package, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = dependency, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []},
       #field{name = message_type, fnum = 4, rnum = 5,
	      type = {msg, 'DescriptorProto'}, occurrence = repeated,
	      opts = []},
       #field{name = enum_type, fnum = 5, rnum = 6,
	      type = {msg, 'EnumDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = service, fnum = 6, rnum = 7,
	      type = {msg, 'ServiceDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = extension, fnum = 7, rnum = 8,
	      type = {msg, 'FieldDescriptorProto'},
	      occurrence = repeated, opts = []},
       #field{name = options, fnum = 8, rnum = 9,
	      type = {msg, 'FileOptions'}, occurrence = optional,
	      opts = []},
       #field{name = source_code_info, fnum = 9, rnum = 10,
	      type = {msg, 'SourceCodeInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'FileDescriptorSet'},
      [#field{name = file, fnum = 1, rnum = 2,
	      type = {msg, 'FileDescriptorProto'},
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['UninterpretedOption.NamePart', 'UninterpretedOption',
     'DescriptorProto.ExtensionRange', 'FileOptions',
     'MethodOptions', 'EnumOptions', 'EnumValueOptions',
     'ServiceOptions', 'MethodDescriptorProto',
     'ServiceDescriptorProto', 'MessageOptions',
     'EnumValueDescriptorProto', 'EnumDescriptorProto',
     'FieldOptions', 'FieldDescriptorProto',
     'DescriptorProto', 'SourceCodeInfo.Location',
     'SourceCodeInfo', 'FileDescriptorProto',
     'FileDescriptorSet'].


get_enum_names() ->
    ['FieldDescriptorProto.Type',
     'FieldDescriptorProto.Label',
     'FileOptions.OptimizeMode', 'FieldOptions.CType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('UninterpretedOption.NamePart') ->
    [#field{name = name_part, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = is_extension, fnum = 2, rnum = 3,
	    type = bool, occurrence = required, opts = []}];
find_msg_def('UninterpretedOption') ->
    [#field{name = name, fnum = 2, rnum = 2,
	    type = {msg, 'UninterpretedOption.NamePart'},
	    occurrence = repeated, opts = []},
     #field{name = identifier_value, fnum = 3, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = positive_int_value, fnum = 4, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = negative_int_value, fnum = 5, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = double_value, fnum = 6, rnum = 6,
	    type = double, occurrence = optional, opts = []},
     #field{name = string_value, fnum = 7, rnum = 7,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = aggregate_value, fnum = 8, rnum = 8,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('DescriptorProto.ExtensionRange') ->
    [#field{name = start, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('FileOptions') ->
    [#field{name = java_package, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = java_outer_classname, fnum = 8, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = java_multiple_files, fnum = 10, rnum = 4,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = java_generate_equals_and_hash, fnum = 20,
	    rnum = 5, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = optimize_for, fnum = 9, rnum = 6,
	    type = {enum, 'FileOptions.OptimizeMode'},
	    occurrence = optional, opts = [{default, 'SPEED'}]},
     #field{name = cc_generic_services, fnum = 16, rnum = 7,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = java_generic_services, fnum = 17,
	    rnum = 8, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = py_generic_services, fnum = 18, rnum = 9,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 10, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('MethodOptions') ->
    [#field{name = uninterpreted_option, fnum = 999,
	    rnum = 2, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('EnumOptions') ->
    [#field{name = uninterpreted_option, fnum = 999,
	    rnum = 2, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('EnumValueOptions') ->
    [#field{name = uninterpreted_option, fnum = 999,
	    rnum = 2, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('ServiceOptions') ->
    [#field{name = uninterpreted_option, fnum = 999,
	    rnum = 2, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('MethodDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = input_type, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = output_type, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = options, fnum = 4, rnum = 5,
	    type = {msg, 'MethodOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('ServiceDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = method, fnum = 2, rnum = 3,
	    type = {msg, 'MethodDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 3, rnum = 4,
	    type = {msg, 'ServiceOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('MessageOptions') ->
    [#field{name = message_set_wire_format, fnum = 1,
	    rnum = 2, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = no_standard_descriptor_accessor, fnum = 2,
	    rnum = 3, type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 4, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('EnumValueDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = number, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = options, fnum = 3, rnum = 4,
	    type = {msg, 'EnumValueOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('EnumDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3,
	    type = {msg, 'EnumValueDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 3, rnum = 4,
	    type = {msg, 'EnumOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('FieldOptions') ->
    [#field{name = ctype, fnum = 1, rnum = 2,
	    type = {enum, 'FieldOptions.CType'},
	    occurrence = optional, opts = [{default, 'STRING'}]},
     #field{name = packed, fnum = 2, rnum = 3, type = bool,
	    occurrence = optional, opts = []},
     #field{name = deprecated, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = experimental_map_key, fnum = 9, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = uninterpreted_option, fnum = 999,
	    rnum = 6, type = {msg, 'UninterpretedOption'},
	    occurrence = repeated, opts = []}];
find_msg_def('FieldDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = number, fnum = 3, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = label, fnum = 4, rnum = 4,
	    type = {enum, 'FieldDescriptorProto.Label'},
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 5, rnum = 5,
	    type = {enum, 'FieldDescriptorProto.Type'},
	    occurrence = optional, opts = []},
     #field{name = type_name, fnum = 6, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = extendee, fnum = 2, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = default_value, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = options, fnum = 8, rnum = 9,
	    type = {msg, 'FieldOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('DescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = field, fnum = 2, rnum = 3,
	    type = {msg, 'FieldDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = extension, fnum = 6, rnum = 4,
	    type = {msg, 'FieldDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = nested_type, fnum = 3, rnum = 5,
	    type = {msg, 'DescriptorProto'}, occurrence = repeated,
	    opts = []},
     #field{name = enum_type, fnum = 4, rnum = 6,
	    type = {msg, 'EnumDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = extension_range, fnum = 5, rnum = 7,
	    type = {msg, 'DescriptorProto.ExtensionRange'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 7, rnum = 8,
	    type = {msg, 'MessageOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('SourceCodeInfo.Location') ->
    [#field{name = path, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = [packed]},
     #field{name = span, fnum = 2, rnum = 3, type = int32,
	    occurrence = repeated, opts = [packed]}];
find_msg_def('SourceCodeInfo') ->
    [#field{name = location, fnum = 1, rnum = 2,
	    type = {msg, 'SourceCodeInfo.Location'},
	    occurrence = repeated, opts = []}];
find_msg_def('FileDescriptorProto') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = package, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = dependency, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []},
     #field{name = message_type, fnum = 4, rnum = 5,
	    type = {msg, 'DescriptorProto'}, occurrence = repeated,
	    opts = []},
     #field{name = enum_type, fnum = 5, rnum = 6,
	    type = {msg, 'EnumDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = service, fnum = 6, rnum = 7,
	    type = {msg, 'ServiceDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = extension, fnum = 7, rnum = 8,
	    type = {msg, 'FieldDescriptorProto'},
	    occurrence = repeated, opts = []},
     #field{name = options, fnum = 8, rnum = 9,
	    type = {msg, 'FileOptions'}, occurrence = optional,
	    opts = []},
     #field{name = source_code_info, fnum = 9, rnum = 10,
	    type = {msg, 'SourceCodeInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('FileDescriptorSet') ->
    [#field{name = file, fnum = 1, rnum = 2,
	    type = {msg, 'FileDescriptorProto'},
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('FieldDescriptorProto.Type') ->
    [{'TYPE_DOUBLE', 1}, {'TYPE_FLOAT', 2},
     {'TYPE_INT64', 3}, {'TYPE_UINT64', 4},
     {'TYPE_INT32', 5}, {'TYPE_FIXED64', 6},
     {'TYPE_FIXED32', 7}, {'TYPE_BOOL', 8},
     {'TYPE_STRING', 9}, {'TYPE_GROUP', 10},
     {'TYPE_MESSAGE', 11}, {'TYPE_BYTES', 12},
     {'TYPE_UINT32', 13}, {'TYPE_ENUM', 14},
     {'TYPE_SFIXED32', 15}, {'TYPE_SFIXED64', 16},
     {'TYPE_SINT32', 17}, {'TYPE_SINT64', 18}];
find_enum_def('FieldDescriptorProto.Label') ->
    [{'LABEL_OPTIONAL', 1}, {'LABEL_REQUIRED', 2},
     {'LABEL_REPEATED', 3}];
find_enum_def('FileOptions.OptimizeMode') ->
    [{'SPEED', 1}, {'CODE_SIZE', 2}, {'LITE_RUNTIME', 3}];
find_enum_def('FieldOptions.CType') ->
    [{'STRING', 0}, {'CORD', 1}, {'STRING_PIECE', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('FieldDescriptorProto.Type',
		     Value) ->
    'enum_symbol_by_value_FieldDescriptorProto.Type'(Value);
enum_symbol_by_value('FieldDescriptorProto.Label',
		     Value) ->
    'enum_symbol_by_value_FieldDescriptorProto.Label'(Value);
enum_symbol_by_value('FileOptions.OptimizeMode',
		     Value) ->
    'enum_symbol_by_value_FileOptions.OptimizeMode'(Value);
enum_symbol_by_value('FieldOptions.CType', Value) ->
    'enum_symbol_by_value_FieldOptions.CType'(Value).


enum_value_by_symbol('FieldDescriptorProto.Type',
		     Sym) ->
    'enum_value_by_symbol_FieldDescriptorProto.Type'(Sym);
enum_value_by_symbol('FieldDescriptorProto.Label',
		     Sym) ->
    'enum_value_by_symbol_FieldDescriptorProto.Label'(Sym);
enum_value_by_symbol('FileOptions.OptimizeMode', Sym) ->
    'enum_value_by_symbol_FileOptions.OptimizeMode'(Sym);
enum_value_by_symbol('FieldOptions.CType', Sym) ->
    'enum_value_by_symbol_FieldOptions.CType'(Sym).


'enum_symbol_by_value_FieldDescriptorProto.Type'(1) ->
    'TYPE_DOUBLE';
'enum_symbol_by_value_FieldDescriptorProto.Type'(2) ->
    'TYPE_FLOAT';
'enum_symbol_by_value_FieldDescriptorProto.Type'(3) ->
    'TYPE_INT64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(4) ->
    'TYPE_UINT64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(5) ->
    'TYPE_INT32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(6) ->
    'TYPE_FIXED64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(7) ->
    'TYPE_FIXED32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(8) ->
    'TYPE_BOOL';
'enum_symbol_by_value_FieldDescriptorProto.Type'(9) ->
    'TYPE_STRING';
'enum_symbol_by_value_FieldDescriptorProto.Type'(10) ->
    'TYPE_GROUP';
'enum_symbol_by_value_FieldDescriptorProto.Type'(11) ->
    'TYPE_MESSAGE';
'enum_symbol_by_value_FieldDescriptorProto.Type'(12) ->
    'TYPE_BYTES';
'enum_symbol_by_value_FieldDescriptorProto.Type'(13) ->
    'TYPE_UINT32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(14) ->
    'TYPE_ENUM';
'enum_symbol_by_value_FieldDescriptorProto.Type'(15) ->
    'TYPE_SFIXED32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(16) ->
    'TYPE_SFIXED64';
'enum_symbol_by_value_FieldDescriptorProto.Type'(17) ->
    'TYPE_SINT32';
'enum_symbol_by_value_FieldDescriptorProto.Type'(18) ->
    'TYPE_SINT64'.


'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_DOUBLE') ->
    1;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_FLOAT') ->
    2;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_INT64') ->
    3;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_UINT64') ->
    4;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_INT32') ->
    5;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_FIXED64') ->
    6;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_FIXED32') ->
    7;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_BOOL') ->
    8;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_STRING') ->
    9;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_GROUP') ->
    10;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_MESSAGE') ->
    11;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_BYTES') ->
    12;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_UINT32') ->
    13;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_ENUM') ->
    14;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SFIXED32') ->
    15;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SFIXED64') ->
    16;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SINT32') ->
    17;
'enum_value_by_symbol_FieldDescriptorProto.Type'('TYPE_SINT64') ->
    18.

'enum_symbol_by_value_FieldDescriptorProto.Label'(1) ->
    'LABEL_OPTIONAL';
'enum_symbol_by_value_FieldDescriptorProto.Label'(2) ->
    'LABEL_REQUIRED';
'enum_symbol_by_value_FieldDescriptorProto.Label'(3) ->
    'LABEL_REPEATED'.


'enum_value_by_symbol_FieldDescriptorProto.Label'('LABEL_OPTIONAL') ->
    1;
'enum_value_by_symbol_FieldDescriptorProto.Label'('LABEL_REQUIRED') ->
    2;
'enum_value_by_symbol_FieldDescriptorProto.Label'('LABEL_REPEATED') ->
    3.

'enum_symbol_by_value_FileOptions.OptimizeMode'(1) ->
    'SPEED';
'enum_symbol_by_value_FileOptions.OptimizeMode'(2) ->
    'CODE_SIZE';
'enum_symbol_by_value_FileOptions.OptimizeMode'(3) ->
    'LITE_RUNTIME'.


'enum_value_by_symbol_FileOptions.OptimizeMode'('SPEED') ->
    1;
'enum_value_by_symbol_FileOptions.OptimizeMode'('CODE_SIZE') ->
    2;
'enum_value_by_symbol_FileOptions.OptimizeMode'('LITE_RUNTIME') ->
    3.

'enum_symbol_by_value_FieldOptions.CType'(0) ->
    'STRING';
'enum_symbol_by_value_FieldOptions.CType'(1) -> 'CORD';
'enum_symbol_by_value_FieldOptions.CType'(2) ->
    'STRING_PIECE'.


'enum_value_by_symbol_FieldOptions.CType'('STRING') ->
    0;
'enum_value_by_symbol_FieldOptions.CType'('CORD') -> 1;
'enum_value_by_symbol_FieldOptions.CType'('STRING_PIECE') ->
    2.


get_package_name() -> 'google.protobuf'.



gpb_version_as_string() ->
    "3.9-8-gf1d090a".

gpb_version_as_list() ->
    [3,9,0,0,8,"gf1d090a"].
