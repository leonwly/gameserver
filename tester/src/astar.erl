
-module(astar).
-compile([export_all]).
-define(SCENEID, 1).
-define(WIDTH , 120).
-define(HEIGHT, 68).
-define(BLACK, <<"">>).

-define(GRID9(GX, GY),
    [
       {GX - 1, GY}
       ,{GX + 1, GY}
       ,{GX, GY + 1}
       ,{GX, GY - 1}
       ,{GX - 1, GY - 1}
       ,{GX + 1, GY + 1}
       ,{GX + 1, GY - 1}
       ,{GX - 1, GY + 1}
    ]).

%% 路径节点
-record(pathnode, {
    g = 0,          %% G值
    f = 0,          %% F值
    cur_node = {},  %% 当前节点坐标
    parent_node = {}%% 父节点坐标
    }
).

start() ->
    ets:new(map_block, [set, named_table, public]),
    ets:new(map_pos, [set, named_table, public]),
    do_load_block(?SCENEID, ?WIDTH, 0, ?BLACK),

    start_find_path(1, 10, 10, 80, 50)
.

do_load_block(_BaseID, _Width, _X, <<>>) ->
    ok;
do_load_block(BaseID, Width, X, Bin) ->
    <<Line:Width/binary, Rest/binary>> = Bin,
    do_load_block_line(BaseID, X, 0, Line),
    do_load_block(BaseID, Width, X + 1, Rest)
.

do_load_block_line(_BaseID, _X, _Y, <<>>) ->
    ok;
do_load_block_line(BaseID, X, Y, Line) ->
    <<Posint, Rest/binary>> = Line,
    Posint =/= $0 andalso ets:insert_new(map_block, {BaseID, X, Y}),
    Posint =/= $0 andalso io:format("pos:[~p,~p]~n",[X, Y]),
    ets:insert_new(map_pos, {BaseID, X, Y}),
    do_load_block_line(BaseID, X, Y + 1, Rest)
.

%% @是否有阻挡
is_block(BaseID, X, Y) ->
    case ets:lookup(map_block, {BaseID, X, Y}) of
        [_] ->
            true;
        _ ->
            false
    end.

%% 点是否存在场景
is_exist(BaseID, X, Y) ->
    case ets:lookup(map_pos, {BaseID, X, Y}) of
        [_] ->
            true;
        _ ->
            false
    end.

%% 开始寻路
-spec start_find_path(integer(), integer(), integer(), integer(), integer()) -> list().
start_find_path(SceneId, Scr_X, Scr_Y, Des_x, Des_y) ->
    %% 关闭列表
    CheckDict = dict:new(),
    %% 开启列表
    UncheckDict = dict:new(),
    %% 当前节点
    CurPathNode = #pathnode{cur_node = {Scr_X, Scr_Y}},
    %% 加入开启列表
    UncheckDict1 = dict:store({Scr_X, Scr_Y}, CurPathNode, UncheckDict),

    find_path_by_astar(SceneId, {Scr_X, Scr_Y}, {Des_x, Des_y}, CheckDict, UncheckDict1, [CurPathNode])
.

-spec find_path_by_astar(integer(), tuple(), tuple(), dict(), dict(), list()) -> list().
find_path_by_astar(SceneId, ScrPos, DesPos, CheckDict, UncheckDict, CurNodeList) ->
    Len = erlang:length(CurNodeList),
    if
        Len =:= 0 -> io:format("==[~p]",[Len]),[]; %% 结束
        Len > 0 ->
            PathNode = lists:last(CurNodeList),
            NowPath = {CurX, CurY} = PathNode#pathnode.cur_node,
            % io:format("[x:~p y:~p, g:~p, f:~p]~n",[CurX, CurY,PathNode#pathnode.g, PathNode#pathnode.f]),
            %% 列表删除
            CurNodeList1 = lists:keydelete({CurX, CurY}, #pathnode.cur_node, CurNodeList),
            %% 开启列表删除
            UncheckDict1 = dict:erase(NowPath, UncheckDict),
            %% 加入关闭列表
            CheckDict1 = dict:store(NowPath, PathNode, CheckDict),

            case NowPath =:= DesPos of
                true ->
                    Result = path_final_list(CheckDict1, DesPos, []), %% 查找到目标
                    io:format("Result:[~p]", [Result]);
                _ ->
                    %% 当前新加的列表
                    NewUncheckDict = [{X,Y} || {X,Y} <- ?GRID9(CurX, CurY)%%, is_exist(SceneId, X, Y) =:= true
                                     , is_block(SceneId, X, Y) =:= false],

                    %% 过虑是否在关闭列表,开启列表中
                    NewUncheckDict1 = [{X1, Y1} || {X1,Y1} <- NewUncheckDict, dict:find({X1,Y1}, CheckDict1) =:= error
                            ],
                    % io:format("[grid[~p],[2:~p]]",[NewUncheckDict1,NewUncheckDict]),
                    %% 转换成路径
                    PlatList = conver_to_path(NewUncheckDict1, [], {CurX, CurY}, DesPos),

                    %% 加入开启列表及当前检查节点列表
                    {UncheckDict2, CurNodeList2} = add_new_node(PlatList, UncheckDict1, CurNodeList1),

                    %% 进行排行序
                    CurNodeList3 = lists:sort(fun (A, B) -> A#pathnode.f > B#pathnode.f end, CurNodeList2),
                    if
                        (CurX < 0) or  (CurY < 0)  ->
                            [];
                        true ->
                            find_path_by_astar(SceneId, ScrPos, DesPos, CheckDict1, UncheckDict2, CurNodeList3)
                    end

            end

    end
.

%% 找到路径
path_final_list(CheckDict, DesPos, Path) ->
    {ok, PathNode} = dict:find(DesPos, CheckDict),
    % io:format("PathNode:~p",[PathNode]),
    Pos = PathNode#pathnode.parent_node,
    if
        erlang:size(Pos) > 0 ->
            Path1 = [Pos | Path],
            path_final_list(CheckDict, Pos, Path1);
        true ->
            Path
    end
.

%% 增加到新的
add_new_node([], CheckDict, CurNodeList) ->
    {CheckDict, CurNodeList};
add_new_node([PathNode|Tail], CheckDict, CurNodeList) ->
    case dict:find(PathNode#pathnode.cur_node, CheckDict) of
        error ->
            CheckDict1 = dict:store(PathNode#pathnode.cur_node, PathNode, CheckDict),
            CurNodeList1 = [PathNode| CurNodeList],
            add_new_node(Tail, CheckDict1, CurNodeList1);
        _ ->
            add_new_node(Tail, CheckDict, CurNodeList)
    end
.

%% 转化成node 的 record
conver_to_path([], RetList, _Parent, _DesPos) ->
    RetList;
conver_to_path([Head = {Scr_X, Scr_Y}|Tail], RetList, Parent = {X, Y}, Des = {Des_x, Des_y}) ->
    Tmp_g = calc_g(Scr_X, Scr_Y, X, Y),
    Tmp_f = Tmp_g + calc_h(Scr_X, Scr_Y, Des_x, Des_y),
    NewPathNode = #pathnode{g = Tmp_g, f = Tmp_f, cur_node = Head, parent_node = Parent},
    NewList = [NewPathNode | RetList],
    conver_to_path(Tail, NewList, Parent, Des)
.

%% 计算G值
calc_g(Scr_X, Scr_Y, Des_x, Des_y) ->
    if
        Scr_X =:= Des_x , abs(Scr_Y - Des_y) =:= 1
        orelse Scr_Y =:= Des_y , abs(Scr_X - Des_x) =:= 1 ->
            10;
        true ->
            14
    end
.

%% 计算H
calc_h(Scr_X, Scr_Y, Des_x, Des_y) ->
    (abs(Des_x - Scr_X) + abs(Des_y - Scr_Y)) * 10
.
